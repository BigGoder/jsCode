import axios from "axios";
let server_url=' ';//请求地址
let token = ' ';  //凭证
server_url = process.env.NODE_ENV === 'development' ? 'http://service-gw.winside.com:8080/smartlight-backend/webapi/' : 'http://122.225.16.218:9001/smartlight-backend/webapi/' ; //环境配置
function service(options = {}) {
		// uni.getStorageSync('token') && (token = uni.getStorageSync('token')); //从vuex中获取登录凭证
    if(options.url.indexOf('http') == -1){
        options.url = `${server_url}${options.url}`;
    }
        //配置请求头
    if(!options.header){
        options.header = {//'application/x-www-form-urlencoded;charsect=UTF-8'
            'content-type':'application/json;charsect=UTF-8'
        };
    }
    if(token){
        options.header.Signature = token
    }

    return new Promise((resolve, reject) => {
                //成功
        axios(options).then(res => {
            if(res.data && res.data.code == 1000){
                resolve(res.data)
                return
            }
            reject(res.data.msg)
        }).catch((error) =>{
            console.log('Error: ', error.message);
            reject(error && error.message)
        });

    });
}
export default service;
import request from './api'

const http ={
    /**
     * methods: 请求
     * @param url 请求地址 
     * @param params 请求参数
     */
    get(url,params){
        const config = {
            method: 'get',
            url:url
        }
        if(params) config.params = params
        return request(config)
    },
    post(url,params){
        const config = {
            method: 'post',
            url:url
        }
        if(params) config.data = params
        return request(config)
    },
    put(url,params){
        const config = {
            method: 'put',
            url:url
        }
        if(params) config.params = params
        return request(config)
    },
    delete(url,params){
        const config = {
            method: 'delete',
            url:url
        }
        if(params) config.params = params
        return request(config)
    }
}
// 导出
export default httpimport Axios from "axios";

let axios = {}

function post(data){
    data.method = "POST"
    return new Promise((resolve,reject)=>{
        Axios(data).then(res => {
            resolve(res)
        }).catch((error) =>{
            console.log('Error: ', error.message);
            reject(error && error.message)
        });
    })
} 

function get(url){
    return new Promise((resolve,reject)=>{
        Axios.get(url).then(res => {
            resolve(res.data)
        }).catch((error) => {
            console.log('Error: ', error.message);
            reject(error && error.message)
        });
    })
}

axios.get = get
axios.post = post
export default axios// export const World3dUrl = "http://192.168.3.78:8889"//"http://192.168.3.78:8889"
export const World3dUrl = "http://122.225.16.218:8889"//"http://192.168.3.78:8889"<template>
    <div>
        <svg width="100" height="100" viewBox="0 0 100 100">
            <circle id="circleBg"  cx="50" cy="50" r="35"  fill="none" stroke-width="10" stroke="#307F9F3D" />
            <circle id="circle" stroke-linecap="round"  cx="50" cy="50" r="35"  fill="none" stroke-width="10" stroke="#52FEF5" :stroke-dasharray="getNum()" stroke-dashoffset="10" />
            <text x="50" y="50" fill="#fff" text-anchor="middle" dominant-baseline="central">
                <tspan id="percent">{{value}}%</tspan>
            </text>
        </svg>
        <div class='title'>
            {{title}}
        </div>
    </div>
</template>

<script>
    export default {
        name:'circleRate',
        props: {
            outerWidth: {
                type: Number,
                default: 82
            },
            title: {
                type: String,
                default: '照明设备'
            },
            value:{
                type: Number,
                default: 75
            }
        },
        methods: {
            getNum() {
                if(!this.value) return 0
                let num = this.value <= 0 ? 0 : this.value
                return `${num * 2.2},300`
            }
        },
    }
</script>

<style vars="{ outerWidth}" lang="less" scoped>

    #circle{
        transition: all .5s;
    }
    
    svg:hover #circle{
        stroke-dashoffset: 0;
    }
    .title{
        text-align: center;
        font-size: 16px;
        color: white;
        width:100px;
    }
</style><template>
    <div>
        <div ref='circle' :style="{'width':width+'px','height':height+'px'}">

        </div>
        <div class='title' :style="{'width':width+'px'}">
            {{title}}
        </div>
    </div>
</template>

<script>
    export default {
        name:'circleProgress',
        props: {
            width:{
                type: Number,
                default: 64
            },
            height:{
                type: Number,
                default: 64
            },            
            text: {
                type: String | Number,
                default: ""
            },
            score:{
                type: Number,
                default: 20
            },
            color:{
                type: String,
                default :'#00000000'
            },
            gradientColor:{
                type: String,
                default :'#307F9F61'
            },
            title:{
                type: String,
                default :''                
            }
        },

        data() {
            return {
                echartCircle: null
            }
        },

        mounted () {
            this.echartCircle = this.$echarts.init(this.$refs.circle);
            const text = this.text; // 环内的文字
            const color = this.gradientColor; //进度颜色
            const score = this.score; // 进度数据
            const option = {
                tooltip: {
                    show: false, // 去除鼠标hover提示框
                },
                title: {
                    text: text,
                    x: 'center',
                    y: 'center',
                    textStyle: {
                        color: '#ffffff',
                        fontSize: 12,
                    },
                },
                series: [{
                    type: 'pie',
                    name: '名称',
                    radius: ['70%', '100%'], // 环的宽度
                    center: ['50%', '50%'],
                    hoverAnimation: false, // 鼠标hover高亮隐藏
                    label: {
                        normal: {
                            position: 'inner',
                            show: false,
                        },
                    },
                    data: [{
                        value: score,
                        itemStyle: {
                            normal: {
                                color: '#52FEF5',
                            },
                            label: {
                                show: false, // 去掉指示线
                            },
                            labelLine: {
                                show: false, // 去掉指示线
                            },
                        },
                    }, {
                        value: 100 - score,
                        itemStyle: {
                            normal: {
                                color: color,
                            },
                            label: {
                                show: false, // 去掉指示线
                            },
                            labelLine: {
                                show: false, // 去掉指示线
                            },
                        },
                    }],
                }],

            };
            this.echartCircle.setOption(option)
        },

        beforeDestroy () {
            if(this.echartCircle){
                this.echartCircle.clear()
                this.$echarts.dispose(this.echartCircle)
                this.echartCircle = null  
            }
        },

    }
</script>

<style lang="less" scoped>
    .title{
        text-align: center;
        font-size: 12px;
        margin-top: 5px;
        color: white;
    }
</style><template>
  <div class="hello">
    <h1>{{ msg }}</h1>
    <p>
      For a guide and recipes on how to configure / customize this project,<br>
      check out the
      <a href="https://cli.vuejs.org" target="_blank" rel="noopener">vue-cli documentation</a>.
    </p>
    <h3>Installed CLI Plugins</h3>
    <ul>
      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel" target="_blank" rel="noopener">babel</a></li>
      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint" target="_blank" rel="noopener">eslint</a></li>
    </ul>
    <h3>Essential Links</h3>
    <ul>
      <li><a href="https://vuejs.org" target="_blank" rel="noopener">Core Docs</a></li>
      <li><a href="https://forum.vuejs.org" target="_blank" rel="noopener">Forum</a></li>
      <li><a href="https://chat.vuejs.org" target="_blank" rel="noopener">Community Chat</a></li>
      <li><a href="https://twitter.com/vuejs" target="_blank" rel="noopener">Twitter</a></li>
      <li><a href="https://news.vuejs.org" target="_blank" rel="noopener">News</a></li>
    </ul>
    <h3>Ecosystem</h3>
    <ul>
      <li><a href="https://router.vuejs.org" target="_blank" rel="noopener">vue-router</a></li>
      <li><a href="https://vuex.vuejs.org" target="_blank" rel="noopener">vuex</a></li>
      <li><a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">vue-devtools</a></li>
      <li><a href="https://vue-loader.vuejs.org" target="_blank" rel="noopener">vue-loader</a></li>
      <li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">awesome-vue</a></li>
    </ul>
  </div>
</template>

<script>
export default {
  name: 'HelloWorld',
  props: {
    msg: String
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
h3 {
  margin: 40px 0 0;
}
ul {
  list-style-type: none;
  padding: 0;
}
li {
  display: inline-block;
  margin: 0 10px;
}
a {
  color: #42b983;
}
</style>
<template>
    <div class='section-circle'>
        <svg>
            <circle
            :cx="x"
            :cy="y"
            :r="r"
            stroke="#52FEF5"
            stroke-width="8"
            fill="none"
            stroke-dasharray="120"
            :stroke-dashoffset="offset"
            stroke-linecap="round"
            />

            <circle
            :cx="x"
            :cy="y"
            :r="r"
            stroke="#34C4FF"
            stroke-width="8"
            fill="none"
            :stroke-dasharray="getArr()" 
            :stroke-dashoffset="offset"
            stroke-linecap="round"
            />
        </svg> 
        <div class="section-circle-value">{{value}}%</div>
        <div class='section-circle-title'>累积访问量</div>
    </div>
</template>

<script>
//# stroke-dasharray 注意，这里数字的比例即为进度条比例
    export default {
        props: {
            value: {
                type: Number,
                default: 50
            },
            x:{
                type: String,
                default: '45'
            },
            y:{
                type:String,
                default:'45'
            },
            r:{
                type:String,
                default:'35'
            }
        },
        data() {
            return {
                offset: '-110',
            }
        },
        methods: {
            getValue() {
                let value = Math.ceil(this.value/100 * 108) 
                if(value > 108) value = 108
                if(value <0) value = 0
                return value
            },
            getArr(){
                return `${this.getValue()} 300`
            }
        },
    }
</script>

<style lang="less" scoped>
    .section-circle{
        position: relative;
        &-value{
            position: absolute;
            top:32px;
            left:30px;
            color: #52FEF5FF;
        }
        &-title{
            position: absolute;
            color:white;
            top:55px;
            width:90px;
            font-size: 12px;
            text-align: center;
        }
    }

</style><template>
    <div class='shan'>
        <div ref='circle' :style="{'width':width+'px','height':height+'px'}">

        </div>
        <div class="text" :style="{'width':width+'px','height':height/3+'px','line-height':height/3+'px'}">{{content}}</div>       
    </div>

</template>

<script>
    export default {
        name:'circleProgress',
        props: {
            width:{
                type: Number,
                default: 80
            },
            height:{
                type: Number,
                default: 80
            },            
            text: {
                type: String | Number,
                default: ""
            },
            color:{
                type: String,
                default :'#000000'
            },
            gradientColor:{
                type: String,
                default :'#52FEF5FF'
            },
            content:{
                type: String,
                default: ""
            }
        },

        data() {
            return {
                echartCircle: null
            }
        },

        mounted () {
            this.echartCircle = this.$echarts.init(this.$refs.circle);
            const text = this.text; // 环内的文字
            const color = this.gradientColor; //进度颜色
            const option = {
                tooltip: {
                    show: false, // 去除鼠标hover提示框
                },
                title: {
                    text: text,
                    x: 'center',
                    y: 'center',
                    textStyle: {
                        color: '#ffffff',
                        fontSize: 12,
                    },
                },
                series: [{
                    type: 'pie',
                    name: '名称',
                    radius: ['80%', '100%'], // 环的宽度
                    center: ['50%', '50%'],
                    startAngle:-155,
                    hoverAnimation: false, // 鼠标hover高亮隐藏
                    label: {
                        normal: {
                            position: 'inner',
                            show: false,
                        },
                    },
                    data: [{
                        value: 65,
                        itemStyle: {
                            normal: {
                                color: color,
                            },
                            label: {
                                show: false, // 去掉指示线
                            },
                            labelLine: {
                                show: false, // 去掉指示线
                            },
                        },
                    },
                    {
                        value: 35,
                        itemStyle: {
                            normal: {
                                color: '#00000000',
                            },
                            label: {
                                show: false, // 去掉指示线
                            },
                            labelLine: {
                                show: false, // 去掉指示线
                            },
                        },
                    }
                    
                    ],
                }],

            };
            this.echartCircle.setOption(option)
        },

        beforeDestroy () {
            if(this.echartCircle){
                this.echartCircle.clear()
                this.$echarts.dispose(this.echartCircle)
                this.echartCircle = null  
            }
        },

    }
</script>

<style lang="less" scoped>
    .shan{
        position: relative;


        .text{
            position: absolute;
            bottom: 0;
            font-size: 11px;
            text-align: center;
            color: white;
        }

    }
</style><template>
  <svg xmlns="http://www.w3.org/2000/svg"
    :width="width"
    :height="height"
    viewBox="0 0 18 18"
    :aria-labelledby="iconName"
    role="presentation"
  >
    <title
      :id="iconName"
      lang="en"
    >{{ iconName }} icon</title>
    <g :fill="iconColor">
      <slot />
    </g>
  </svg>
</template>
<script>
export default {
  props: {
    iconName: {
      type: String,
      default: 'box'
    },
    width: {
      type: [Number, String],
      default: 18
    },
    height: {
      type: [Number, String],
      default: 18
    },
    iconColor: {
      type: String,
      default: 'currentColor'
    }
  }
}
</script><template>
    <div class='con'>
        <div class="header"> 
            <div>{{title}}</div>
            <div class="header-hint">
                <slot name='hint'></slot>
            </div>
        </div>
        <div class="body" ref='sectionBody'> 
            <slot></slot>
        </div>
    </div>
</template>

<script>
    export default {
        props: {
            title: {
                type: String,
                default: '标题'
            },
            padRight:{
                type:Number,
                default:45
            }
        },

        mounted () {
            this.$refs.sectionBody.style.paddingRight = `${this.padRight}px`
        },
    }
</script>

<style lang="less" scoped>
    @mainColor:#52FEF5;
    @titlePadTop:14px;
    .con{
        width: 420px;
        .header{
            height:36px;
            padding-top: @titlePadTop ;
            padding-right: 45px;
            padding-left: 15px;
            background: url(../assets/section-top.png);
            background-size:100% 100%;
            display: flex;

            align-items: center;
            justify-content: space-between;
            color:@mainColor;
            line-height: 27px;
            font-size: 20px;

            
        }
        .body{
            // margin-top: -1px;
            background-image: url(../assets/section-middle.png);
            //background-color: #000;
            background-size:100% 100%;
            padding-right: 45px;
            padding-left: 15px;
            padding-bottom: 10px;
            box-shadow: 0px 0px 10px 0px rgba(23, 159, 249, 0.5);
        }
    }
</style><template>
    <div class="monitor">
      <video ref="videoNode" class="video-js vjs-default-skin"></video>
    </div>
</template>
<script>
import videojs from "video.js";
//播放器中文，不能使用.js文件
import videozhCN from "video.js/dist/lang/zh-CN.json";
//样式文件注意要加上
import "video.js/dist/video-js.css"; 
//如果要播放RTMP要使用flash 需要先npm i videojs-flash
import "videojs-flash";
export default {
    data() {
        return {
          player: null,
          timer:null,
        };
    },
    
    props: {
        src: {
            type: String,
            default: "http://122.225.16.218:7086/live/cameraid/1000005$5/substream/2.m3u8"
        },
    },

    mounted(){
        let options = {
            autoplay: true, //自动播放
            language: "zh-CN",
            controls: false, //控制条
            preload: "auto", //自动加载
            errorDisplay: true, //错误展示
            muted: true,
            loop:true,
            fluid: true, //跟随外层容器变化大小，跟随的是外层宽度
            // controlBar: false,  // 设为false不渲染控制条DOM元素，只设置controls为false虽然不展示，但是存在
            // textTrackDisplay: false,  // 不渲染字幕相关DOM
            userActions: {
                hotkeys: true //是否支持热键
            },
            notSupportedMessage: "此视频暂无法播放，请稍后再试",
            sources: [
              {
                src: this.src,
                type: "application/x-mpegURL"
                //type: 'rtmp/flv',
              }
            ]
        };
        let self = this
        this.player = videojs(
            this.$refs.videoNode,
            options,
            function onPlayerReady() {
                this.on("canplaythrough",function(){
                    // console.log("视频源数据加载完成")
                    self.$emit('start')
                })
                this.on("waiting", function(){
                    // console.log("等待数据")
                });
                this.on("play", function(){
                    // console.log("视频开始播放")
                });
                this.on("playing", function(){
                    // console.log("视频播放中")
                });
            }    
        );

        videojs.addLanguage("zh-CN", videozhCN);
    },
    beforeDestroy() {
        if (this.player) {
          this.player.dispose();
          this.player = null
        }
    },
    destroyed () {
        // console.log('1',this.player);
    },
}
</script>
<style lang="less" scoped>
.monitor{
    width: 170px;
    height: 141px;
}
</style><template>
    <div>
        <MSection title='安全警告'>
            <template slot="hint">
                <div class='menu'>
                    当前: {{source && source.length}}
                </div>
            </template>
            <div class="content">
                <div class="content-con" :class="{marquee_top:animate}">
                    <div v-for="(item,index) in warns" :key="index">{{item.deviceName}}:{{item.alarmTypeName}}   {{item.handleStatName}} {{item.alarmDateString}}</div>
                </div>
                
                <!-- <slot></slot> -->
                
            </div>
            
            
        </MSection>
    </div>
</template>

<script>
    import MSection from '../components/mSection'
    export default {
        components: {
            MSection,
        },    

        data() {
            return {
                warns:[
                ],
                animate:false,
                slideInterval:null,
                source:[]
            }
        },

        props: {
            type: {
                type: Number,
                default: 1
            },
        },

        async created () {
            try {
                
                let res = await this.$request.post('databoard/alarm',{
                    alarmType:this.type
                })
                this.source = res.result && res.result.data
                this.warns = this.source.splice(0,7)
            } catch (error) {
                console.log('created',error);
            }
        },

        mounted () {
            this.slideInterval = setInterval(this.showMarquee,2000)
        },

        methods: {
            showMarquee() {
                this.warns.push(this.source.pop())
                this.animate = true
                setTimeout(()=>{
                    this.animate = false;
                    this.source.push(this.warns.shift())
                },1000)
            }
        },

        beforeDestroy () {
            if(this.slideInterval){
                clearInterval(this.slideInterval)
                this.slideInterval = null;
            }
        },

    }
</script>

<style lang="less" scoped>
    .menu{
        height:21px;
        text-align: center;
        line-height: 21px;
        font-size: 16px;
    }

    
    .marquee_top {
        transition: all 1s;
        margin-top: -35px;
    }
    .content{
        height: 180px;
        overflow: hidden;
        padding-bottom: 20px;
        color: white;
        font-size: 13px;
        &-con{
           // overflow: hidden;
            max-height: 160px;
            div{
                height: 20px;
                line-height: 20px;
                margin-top: 15px;
            }  
        }

    }
</style><template>
  <svg :class="svgClass" aria-hidden="false" v-on="$listeners">
    <use :xlink:href="iconName" class="svgs"/>
  </svg>
</template>

<script>
  export default {
    name: 'SvgIcon',
    props: {
      iconClass: {
        type: String,
        required: true
      },
      name: {
        type: String,
        default: ''
      }
    },
    computed: {
      iconName() {
        return `#icon-${this.iconClass}`
      },
      svgClass() {
        if (this.name) {
            return this.name
        } else {
          return 'svg-icon'
        }
      }
    }
  }
</script>
 
<style scoped>
  .svg-icon {
    width: 10em;
    height: 10em;
    vertical-align: -0.15em;
    fill: currentColor;
    overflow: hidden;
  }
</style><template>
    <div>
        <video-player 
            ref="player"
            :options="playerOptions" 
            :playsinline="true"
            @ended="onPlayerEnded($event)"

        ></video-player>
    </div>
                <!-- @loadeddata="onPlayerLoadeddata($event)"
            @waiting="onPlayerWaiting($event)"
            @playing="onPlayerPlaying($event)"
            @timeupdate="onPlayerTimeupdate($event)"
            @canplay="onPlayerCanplay($event)" -->
</template>

<script>
    // video-player
    import 'video.js/dist/video-js.css'
    import "videojs-contrib-hls"
    // video-player
    import { videoPlayer } from 'vue-video-player'
    export default {

        props: {
            src:{
                type: String,
                default: "http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8"
            }
        },

        components: {
            videoPlayer
        },

        data() {
            return {
                video: 'hello-video',
                playerOptions: {
                    // height:"150",
                    language: 'en',
                    loop: true,      // 是否视频一结束就重新开始。
                    preload: 'auto',
                    // playbackRates: [0.5, 1.0, 1.5, 2.0],
                    sources: [{
                        type: "application/x-mpegURL",
                        withCredentials: false,
                        // src:this.src
                        src: "http://ivi.bupt.edu.cn/hls/cctv2.m3u8"
                    }],
                    techOrder: ['html5'],
                    flash: { hls: { withCredentials: false }},
                    html5: { hls: { withCredentials: false }},
                    autoplay: true,
                    controls: false,
                    // aspectRatio: '13:10',
                    fluid: true,
                    muted: true,
                    poster: "/poster.png",
                    notSupportedMessage: '不支持的视频格式'
                }
            }
        },

        methods: {
            onPlayerEnded(e) {
                console.log('e',e);
                this.$emit('onPlayerEnded')
            }
        },

        beforeDestroy () {
            if(this.$refs.player){
                this.$refs.player.dispose()
                this.$refs.player = null
            }
        },

        destroyed () {
            console.log('1',this.$refs.player);
        },

    }
</script>

<style lang="less" scoped>

</style><template>
  <div class="container">
    <div id="player">

    </div>
  </div>

</template>

<script>
import cloudRenderer from "superapi-51world"
import {World3dUrl} from '@/api/base.js'
export default {
    name: 'App',
    components: {

    },
    data() {//  西大门 0.000517,-0.000006    南大门 0.000680  0.000006
        return {
            cloudRender:null,
            isShow:false,
            cloudurl:World3dUrl,//云渲染服务地址, 8889:固定端口  https://vizservice.51hitech.com  http://192.168.3.78:8889
            orderID:"D792483b",// UuWEejBC4V  D792483b
            lng: 0.000680,//初始经度   上下  0.000680
            lat:0.000006 ,//初始维度  左右0.000006
            pitch:31,//俯仰角
            yaw:269,//镜头偏航角
            arm_distance:747,//镜头中心距离
            currentFloor:2,
            currentBuildId : 'Build_05',
            build5ids:[],
            floorParams:{},
            testPoints:[
                {x:24.75,y:23.65},
                {x:77.375,y:36.655},
                {x:158.640,y:52.745},
            ],
            originImgs:[
                // "https://i.loli.net/2021/05/27/EpqitPHTnjosxXr.png",// 灯 lamp
                // "https://i.loli.net/2021/05/27/DmunjzJdPMBlILp.png",// 麦克风 voice
                // "https://i.loli.net/2021/05/27/H1gVSbvmA6WkOZ5.png",// 无线传感器 wireless
                // "https://i.loli.net/2021/05/27/4cK9s1VtJaL3fMk.png",// 插座 socket
                // "https://i.loli.net/2021/05/27/91YK7kguxFORsB6.png",// 开关面板 switch
                // "https://i.loli.net/2021/05/26/dDiEKvuX29QpOSN.png" ,// 摄像头  carama

                "file:///D:/assets/lamp.png",
                "file:///D:/assets/voice.png",
                "file:///D:/assets/wireless.png",
                "file:///D:/assets/socket.png",
                "file:///D:/assets/switch.png",
                "file:///D:/assets/camara.png"
            ]
        } 
    },
    async created () {//测试链接
        this.floorParams = {//数组对应当前拆解层数和总层数
            Build_01:[3,3],
            Build_02:[2,2],
            Build_03:[2,2],
            Build_04:[2,2],
            Build_05:[3,3]
        }
        let myHandleResponseFunction = (data)=>{
            let jsonObject = JSON.parse(data);
            if(!jsonObject) return
            let action = jsonObject.args && jsonObject.args.action
            if(action == "mouse_wheel"){
                // console.log('mouse_wheel',jsonObject);
            }
            //console.log('event',jsonObject.func_name)
            switch (jsonObject.func_name) {
                case 'beginPlay':
                    // document.querySelector('.begin').style = 'display:none;';
                    break;
                case "OnRangeClick":
                    const id = jsonObject.args && jsonObject.args.id
                    if(id == 'Build_05' || id == 'Build_big') return
                    this.splitFloor(id)
                    //this.updateRange(jsonObject.args && jsonObject.args.id,'ff0000')
                    break;
                // case 'OnRangeHover':
                //     this.updateRange(jsonObject.args && jsonObject.args.id,'ffff00')
                //     break;
                // case 'OnRangeUnHover':
                //     this.updateRange(jsonObject.args && jsonObject.args.id,'0000ff')
                //     break;

                case 'APIAlready':
                    this.apiAlready()
                    this.addPath()
                    break;
                case 'OnSuperAPI_Error_Catch':
                    //console.log('OnSuperAPI_Error_Catch',jsonObject);
                    break;
                case 'OnPOIClick':
                    // console.log('OnPOIClick_id = ' + jsonObject.args.id);
                    break;
                case "OnGetCoord":
                    // console.log('OnGetCoord',jsonObject);
                    break;
            }
            return data;
        }
        this.register()// 注册各种回调事件
        let params  = `order=${this.orderID}&width=${window.innerWidth}&height=${window.innerHeight}`
        let option = {
            url:`${this.cloudurl}/Renderers/Any/order`,
            headers: {
                "Content-type": "application/x-www-form-urlencoded"
            },
            data: params,
        }
        try {
            let res = await this.$axios.post(option)
            console.log('res',res);
            //启动云渲染
            this.cloudRender.SuperAPI("StartRenderCloud", res.data.url);
            //事件注册
            this.cloudRender.SuperAPI("RegisterCloudResponse", myHandleResponseFunction);
        } catch (error) {
            console.log('Renderers',error.message);
        }
    },

    async mounted(){
        let response = await this.$axios.get('/1f_points.json')
        this.testPoints = response
    },

    methods: {
        register(){
            this.cloudRender = new cloudRenderer("player", 0);
            this.cloudRender.SuperAPI_onRenderCloudError = function() {
                // this.$message('云渲染异常时的处理,请重新刷新')
            };
            this.cloudRender.SuperAPI_onUnavailableRender = function() {
                // this.$message('未获取到渲染资源,请重新刷新')
            };
            this.cloudRender.SuperAPI_onStopedRenderCloud = function() {
                // this.$message('云渲染关闭或通信息中断,请重新刷新')
            }

            this.cloudRender.SuperAPI_onRenderCloudConnected = function() {
                // console.log('云服务连接成功,正在进入')
            };

            this.cloudRender.SuperAPI("superAPIinfo", (e) => {
                // console.log("superAPIinfo",e);
            })

        },

        triggerAuto(autoCondition){
            let jsondata = {
                "coord_type":0,
                "cad_mapkey":"",
                "center_coord":`${this.lng},${this.lat}`,
                "arm_distance":this.arm_distance,
                "pitch":this.pitch,
                "yaw":this.yaw,
                "fly":false
            }
            this.cloudRender.SuperAPI("SetCameraInfo", jsondata)
            switch(autoCondition){
                case 0:
                    this.autoControll()
                    break;
                case 1:
                    this.autoHome()
                    break;
                case 2:
                    this.autoLamp()
                    break;
                case 3:
                    this.autoSave()
                    break;
                case 4:
                    this.autoSafety()
                    break;
                case 5:
                    this.autoControll()
                    break;
                // case 5:
                //     this.autoControll()
                //     break;
            }
        },

        measure(type){
            let jsondata = {
                    "coord_type":0,          //坐标类型(0:经纬度坐标, 1:cad坐标)
                    "cad_mapkey":""          //CAD基准点Key值, 项目中约定
            }
            switch(type){
                case 0:
                    this.cloudRender.SuperAPI("StartMeasureTool", jsondata, (e) => {
                        console.log('StartMeasureTool',e);
                    })
                    break;
                case 1:
                    this.cloudRender.SuperAPI("EndMeasureTool")
                    break;
                default:
                break;
            }
        },

        apiAlready(){
            console.log('APIAlready: 3D世界加载完成');
            let jsondata = {
                "coord_type":0,                                 //坐标类型(0:经纬度坐标, 1:cad坐标)
                "cad_mapkey":"",                                //CAD基准点Key值, 项目中约定
                "center_coord":`${this.lng},${this.lat}`,           //中心点的坐标 lng,lat  0.000522,-0.000712
                "arm_distance":this.arm_distance,                            //镜头距中心点距离(单位:米)
                "pitch":this.pitch,                                     //镜头俯仰角(5~89)
                "yaw":this.yaw,                                        //镜头偏航角(0正北, 0~359)
                "fly":false                                     //true: 飞行动画
            }   
            this.cloudRender.SuperAPI("SetCameraInfo", jsondata)
            let jsondata1 = {
                "coord_type":0,          //坐标类型(0:经纬度坐标, 1:cad坐标)
                "cad_mapkey":"",         //CAD基准点Key值, 项目中约定
                "coord_z_type":0         //坐标高度类型(0:相对3D世界表面；1:相对3D世界地面；2:相对3D世界海拔; 注:cad坐标无效)
            }
            this.cloudRender.SuperAPI("StartGetCoord", jsondata1, (e) => {
                // console.log('StartGetCoord',e);
            })

            let point1 = [
                {"coord":"-0.000614,0.001211"},
                {"coord":"-0.000614,0.002017"},
                {"coord":"0.00049,0.002017"},
                {"coord":"0.00049,0.001214"}
            ]

            let point2 = [
                {"coord":"0.000626,0.001754"},
                {"coord":"0.000626,0.002034"},
                {"coord":"0.001311,0.002034"},
                {"coord":"0.001311,0.001754"}
            ]
            let point3 = [
                {"coord":"0.000645,0.001339"},
                {"coord":"0.000645,0.001603"},
                {"coord":"0.001301,0.001603"},
                {"coord":"0.001301,0.001336"}
            ]   
            let point4 = [
                {"coord":"0.000641,0.000912"},
                {"coord":"0.000641,0.001124"},
                {"coord":"0.001277,0.001124"},
                {"coord":"0.001277,0.000904"}
            ]                     
            this.addRange('Build_01',point1,'0000ff',30)
            this.addRange('Build_02',point2,'0000ff',30)
            this.addRange('Build_03',point3,'0000ff',30)
            this.addRange('Build_04',point4,'0000ff',30)
            // this.addRange('Build_05',point5)

            // this.show222()
            // setInterval(()=>{
            //     let jsondata = {
            //         "coord_type":0,          //坐标类型(0:经纬度坐标, 1:cad坐标)
            //         "cad_mapkey":""          //CAD基准点Key值, 项目中约定
            //     }
            //     this.cloudRender.SuperAPI("GetCameraInfo", jsondata, (e) => {
            //         console.log('e',e);
            //     })
            // },10 * 1000)
            this.autoControll()
        },

        async autoControll(){// 流程开始走
            await this.sleep(1500)
            let pointBig = [
                {coord : "-0.00056,-0.001752"},
                {coord : "0.001647,-0.002143"},
                {coord : "0.001648,0.002221"},
                {coord : "-0.000795,0.002165"}
            ]     
            
            this.addRange('Build_big',pointBig,'00ff00')
            await this.sleep(2500)

            for(let  i =0 ;i<10;i++){
                this.arm_distance -= 45
                let jsondata = {
                    "coord_type":0,
                    "cad_mapkey":"",
                    "center_coord":`${this.lng},${this.lat}`,
                    "arm_distance":this.arm_distance,
                    "pitch":this.pitch,
                    "yaw":this.yaw,
                    "fly":true
                } 
                await this.sleep(100)
                this.cloudRender.SuperAPI("SetCameraInfo", jsondata)
            }
            await this.sleep(1000)
            let jsonRemoveRange = {
                "id":['Build_big','Build_05'],            //覆盖物id
                "covering_type":"range"     //覆盖物类型, 详见下表
            }
            this.cloudRender.SuperAPI('RemoveCovering',jsonRemoveRange);
            
            let point5 = [
                    {
                    "coord": "0.000653,-0.000768"     //坐标点 lng,lat
                    },
                    {
                    "coord": "0.001306,-0.000764"
                    },
                    {
                    "coord": "0.00131,0.0008"
                    },
                    {
                    "coord": "0.000651,0.000813"
                    }
            ]
            await this.sleep(1000)
            this.addRange('Build_05',point5,'0000ff',50)
            this.arm_distance -= 90
            let jsondata1 = {
                "coord_type":0,
                "cad_mapkey":"",
                "center_coord":`${this.lng},${this.lat}`,
                "arm_distance":this.arm_distance,
                "pitch":this.pitch,
                "yaw":this.yaw,
                "fly":true
            } 
            this.cloudRender.SuperAPI("SetCameraInfo", jsondata1)
            this.$emit('render',1)//   这个显示暂定放在这
            // this.autoLamp()
        },

        async autoHome(){
            this.arm_distance -= 70
            let jsondata2 = {
                "coord_type":0,
                "cad_mapkey":"",
                "center_coord":`${this.lng},${this.lat}`,
                "arm_distance":this.arm_distance,
                "pitch":this.pitch,
                "yaw":this.yaw,
                "fly":false
            } 
            this.cloudRender.SuperAPI("SetCameraInfo", jsondata2)
            this.splitFloor05('Build_05',1)
            await this.sleep(500)
            this.renderBuildPoi(4)//首页
            await this.sleep(8000)
            this.arm_distance += 70
            let jsondata3 = {
                "coord_type":0,
                "cad_mapkey":"",
                "center_coord":`${this.lng},${this.lat}`,
                "arm_distance":this.arm_distance,
                "pitch":this.pitch,
                "yaw":this.yaw,
                "fly":true
            } 
            
            this.cloudRender.SuperAPI("SetCameraInfo", jsondata3)
            await this.sleep(2000)
            // let newYaw = this.yaw + 60// +=  就是不行   
            this.yaw -= 60
            this.arm_distance -= 60
            // this.yaw = newYaw
            let jsondata4 = {
                "coord_type":0,
                "cad_mapkey":"",
                "center_coord":`${this.lng},${this.lat}`,
                "arm_distance":this.arm_distance,
                "pitch":this.pitch,
                "yaw":this.yaw,
                "fly":false
            } 
            this.cloudRender.SuperAPI("SetCameraInfo", jsondata4)
            this.$emit('render',2)//   切换到灯联网
        },

        async autoLamp(){
            await this.sleep(1200)
            let jsondata1 = {
                "covering_type":"poi"   //覆盖物类型, 详见下表
            }
            this.cloudRender.SuperAPI("RemoveAllCovering", jsondata1, (status) => {
                //console.log(status); //成功、失败回调
            })
            await this.sleep(1200)
            this.renderBuildPoi(0)
            await this.sleep(6000)
            this.yaw -= 90
            this.arm_distance += 90
            let jsondata2 = {
                "coord_type":0,
                "cad_mapkey":"",
                "center_coord":`${this.lng},${this.lat}`,
                "arm_distance":this.arm_distance,
                "pitch":this.pitch,
                "yaw":this.yaw,
                "fly":false
            }
            this.cloudRender.SuperAPI("SetCameraInfo", jsondata2)
            await this.sleep(1600)
            this.$emit('render',3)//   切换到智慧节能
            // this.autoSave()

        },

        async autoSave(){//智慧节能
            let jsondata1 = {
                "covering_type":"poi"   //覆盖物类型, 详见下表
            }            
            this.cloudRender.SuperAPI("RemoveAllCovering", jsondata1, (status) => {
                //console.log(status); //成功、失败回调
            })
            this.splitFloor05('Build_05',3)
            await this.sleep(2000)
            this.splitFloor05('Build_05',1)
            await this.sleep(2500)
            this.renderBuildPoi(3)
            await this.sleep(5000)
            this.yaw -= 100
            this.arm_distance -= 120 
            let jsondata4 = {
                "coord_type":0,
                "cad_mapkey":"",
                "center_coord":`${this.lng},${this.lat}`,
                "arm_distance":this.arm_distance,
                "pitch":this.pitch,
                "yaw":this.yaw,
                "fly":false
            }        
            this.cloudRender.SuperAPI("SetCameraInfo", jsondata4)  
            this.cloudRender.SuperAPI("RemoveAllCovering", jsondata1, (status) => {
                //console.log(status); //成功、失败回调
            })
            await this.sleep(2000)
            this.splitFloor05('Build_05',0)
            this.$emit('render',4)//切换到智慧安防
            // this.autoSafety()
        },  

        async autoSafety(){//智慧安防
            let jsondata1 = {
                "covering_type":"poi"   //覆盖物类型, 详见下表
            }     
            this.splitFloor05('Build_05',1)
            // await this.sleep(000)
            this.renderBuildPoi(5)
            await this.sleep(7500)
            this.arm_distance=291
            this.yaw= 269
            let jsondata5 = {
                "coord_type":0,
                "cad_mapkey":"",
                "center_coord":`${this.lng},${this.lat}`,
                "arm_distance":this.arm_distance,
                "pitch":this.pitch,
                "yaw":this.yaw,
                "fly":false
            }
            this.cloudRender.SuperAPI("SetCameraInfo", jsondata5)
            this.cloudRender.SuperAPI("RemoveAllCovering", jsondata1, (status) => {
                //console.log(status); //成功、失败回调
            })
            this.splitFloor05('Build_05',3) 
            //this.autoCondition = 5
            // this.$emit('render',5)//镜头到首页
            this.yaw =269//镜头偏航角
            this.arm_distance=747//镜头中心距离
            this.$emit('render',0)
            let jsondata6 = {
                "coord_type":0,
                "cad_mapkey":"",
                "center_coord":`${this.lng},${this.lat}`,
                "arm_distance":this.arm_distance,
                "pitch":this.pitch,
                "yaw":this.yaw,
                "fly":false
            }    
            this.cloudRender.SuperAPI("SetCameraInfo", jsondata6)
            await this.sleep(1000) 
            // this.autoControll()
        },

        getOpera(point){
            let lng = -0.00000896 *(point.y) + 0.00130//00000938
            let lat = 0.000009036 * (-point.x) + 0.00079
            //console.log('point',`${lng},${lat}`);
            return `${lng},${lat}`
        },

        sleep(d){
            return new Promise((resolve)=>{
                setTimeout(resolve,d)
            },d)
        },

        renderBuildPoi(type=4){// 4 首页 
            let imgUrl =this.originImgs[type]
            for(let i =0 ;i<58;i++){
                
                if(type ==4){
                    imgUrl = this.originImgs[Math.floor(Math.random() * this.originImgs.length)]
                }
                
                let poi = this.testPoints[i]
                let jsondata = {
                    "id":"",
                    "coord_type":0,                         //坐标类型(0:经纬度坐标, 1:cad坐标)
                    "cad_mapkey":"",                        //CAD基准点的Key值, 项目中约定
                    "coord":"",         //POI点的坐标 lng,lat
                    "coord_z":4.5,                            //高度(单位:米)
                    "coord_z_type":0,                       //坐标高度类型(0:相对3D世界表面；1:相对3D世界地面；2:相对3D世界海拔; 注:cad坐标无效)
                    "always_show_label":false,               //是否永远显示label, true:显示label(默认), false:不显示label
                    "show_label_range":"0,10",            //POI点显示label的范围(单位:米, 范围最小、最大距离; 在此范围内显示, 超出范围隐藏; 注意:always_show_label属性优先于此属性)
                    "sort_order":false,                     //是否开启遮挡排序(根据POI点真实3D位置开启遮挡排序,
                    "state":"state_1",                      //与marker之中images中的define_state对应
                    "marker":{
                        "size":"32,32",                   //marker大小(宽,高 单位:像素)
                        "images":[
                            {
                                "define_state":"state_1",   //marker图片组
                                "normal_url":imgUrl,        //normal 图片url地址
                                "activate_url":imgUrl       //hover, active 图片url地址
                                                //本地图片地址一: "file:///D:/xxx/markerNormal.png",    D: 云渲染所在盘符
                                                //本地图片地址二: "path:/UserData/markerNormal.png",    图片资源由云渲染后台管理, 云渲染4.3.1以上版本
                            }
                        ]
                    },
                    "label":{
                        "bg_image_url":"",      
                                        //本地图片地址一: "file:///D:/xxx/LabelBg.png",    D: 云渲染所在盘符
                                        //本地图片地址二: "path:/UserData/LabelBg.png",    图片资源由云渲染后台管理, 云渲染4.3.1以上版本
                        "bg_size":"1,1", //label大小(宽, 高 单位:像素)
                        "bg_offset":"1,1", //整个label左上角相对于marker的中心点(coord坐标中心点)的偏移(x,y 单位:像素), 注: x为正向右, y为正向上
                        "content": [
                            {
                                "text":["文本内容A", "ff0000ff", "0"],   //[文本内容, HEXA颜色, 文本大小]
                                "text_offset":"1,1"     //文本框左上角相对于label中bg_offset左上角的margin偏移(x,y 单位:像素), 注: x为正向右, y为正向下
                            },
                            {
                                "text":["文本内容B", "00ff00ff", "0"],
                                "text_offset":"1,1"
                            }
                        ]
                    },
                    "window":{
                        "url":"http://superapi.51hitech.com/doc-static/images/static/echarts.html",      
                            //本地地址一: "file:///D:/xxx/echarts.html",    D: 云渲染所在盘符
                        "size":"1,1",      //window大小(宽,高 单位:像素)
                        "offset":"10,20"      //window左上角相对于marker的中心点(coord坐标中心点)的偏移(x,y 单位:像素), 注: x为正向右, y为正向上
                    }
                }
                jsondata.id = `Build_0501-${i}`
                jsondata.coord = this.getOpera(poi)
                this.build5ids.push(jsondata.id)
                setTimeout(()=>{
                    this.cloudRender.SuperAPI("AddCustomPOI", jsondata, () => {

                    })
                },i*80)
            }
        },

        addCustomPOI() {
            let customPOIdata = {
                "id": "customPOI_ID",
                "coord_type": "0",
                "cad_mapkey": "",
                "coord": "0.000564,-0.001886",
                "coord_z": "0",
                "coord_z_type": 0,
                "always_show_label": "true",
                "show_label_range": "0,8000",
                "sort_order": "false",
                "state": "state_1",
                "marker": {
                    "size": "100,228",
                    "images": [{
                        "define_state": "state_1",
                        "normal_url": "http://superapi.51hitech.com/doc-static/images/static/markerNormal.png",
                        "activate_url": "http://superapi.51hitech.com/doc-static/images/static/markerActive.png"
                    }]
                },
                "label": {
                    "bg_image_url": "http://superapi.51hitech.com/doc-static/images/static/LabelBg.png",
                    "bg_size": "200,80",
                    "bg_offset": "50,200",
                    "content": [{
                        "text": ["这是大门吧", "ff0000ff", "30"],
                        "text_offset": "10,5"
                    },
                    {
                        "text": ["文本内容B", "00ff00ff", "20"],
                        "text_offset": "10,45"
                    }
                    ]
                },
                "window":{
                    "url":"http://192.168.88.184:3000/",      
                    "size":"520,350", 
                    "offset":"50,180" 
                }

            };
            this.cloudRender.SuperAPI('RemoveAllPOI');
            this.cloudRender.SuperAPI('AddCustomPOI', customPOIdata)
            this.isShow = true
            setTimeout(() => this.cloudRender.SuperAPI('FocusPOI', { 'id': 'customPOI_ID', 'distance': 300 }), 5e2);
        },

        getCameraInfo() {
            let jsonData = {
                "coord_type": 0,
                "cad_mapkey": ""
            }
            this.cloudRender.SuperAPI('GetCameraInfo', jsonData, (e) => {
                let data = JSON.parse(e)
                let armDistance = data.arm_distance
                if(armDistance >0){
                    this.arm_distance = armDistance
                }
            })
        },

        addPath(){
            let jsondata1 = {
                "id":"id",
                "coord_type":0,                    //坐标类型(0:经纬度坐标, 1:cad坐标)
                "coord_z_type":0,                  //坐标高度类型(0:相对3D世界表面；1:相对3D世界地面；2:相对3D世界海拔; 注:cad坐标无效)
                "cad_mapkey":"",                   //CAD基准点Key值, 项目中约定
                "type":"arrow",                    //样式类型; 注①
                "color":"ff0000",                  //颜色(HEX颜色值, "color":"" 透明路径)
                "pass_color":"ffff00",             //覆盖物移动经过路径颜色(HEX颜色值)
                "width":10,                        //宽度(单位:米)
                "points":[
                    {
                        "coord":"0.000939,-0.002111",
                        "coord_z":0
                    },
                    {
                        "coord":"0.000423,-0.001987",
                        "coord_z":0
                    },
                    {
                        "coord":"0.000402,-0.001099",   //路径坐标点 lng,lat
                        "coord_z":0                //高度(单位:米)
                    }

                ]
            }

            this.cloudRender.SuperAPI("AddPath", jsondata1, (status, progress) => {
                // console.log(status, progress);
            })

            let jsondata = {
                "coverings_id": "customPOI_ID",          //要关联Window的覆盖物id (此覆盖物应提前完成创建)
                "coverings_type": "path",           //覆盖物类型 见下表
                "POIData": {
                    "id": "CoverWindow_ID",         //不可和其他poi的id重复
                    "window": {
                    "url": "http://superapi.51hitech.com/doc-static/images/static/echarts.html",
                    "size": "520,350",
                    "offset": "0,0"
                    }
                }
            }
            this.cloudRender.SuperAPI("AddCoverWindow", jsondata)
        },

        addRange(id,points,color='0000ff',height=130){
            let jsondata = {
                "id":id,
                "coord_type":0,                  //坐标类型(0:经纬度坐标, 1:cad坐标)
                "cad_mapkey":"",                 //CAD基准点Key值, 项目中约定
                "coord_z": 0,                    //高度(单位:米)
                "coord_z_type":0,                //坐标高度类型(0:相对3D世界表面；1:相对3D世界地面；2:相对3D世界海拔; 注:cad坐标无效)
                "type":"box_wave",               //样式类型; 注①
                "color":color,                //轮廓颜色(HEX颜色值)
                "range_height":height,               //围栏高度(单位:米)
                "fill_area":"none",              //底部区域填充类型; 注②
                "points":points
            }
            let jsonRemoveRange = {
                "id":['Build_big','Build_05'],            //覆盖物id
                "covering_type":"range"     //覆盖物类型, 详见下表
            }

            this.cloudRender.SuperAPI('RemoveCovering', jsonRemoveRange);//{"covering_type":"range"}
            
            this.cloudRender.SuperAPI("AddRange", jsondata, (status, progress) => {
                console.log("AddRange", status);
                // console.log("AddRange", progress);
            })
        },

        updateRange(id,color){
            let jsondata = {
                "id":id,
                "type":"box_wave",              //样式类型; 注①
                "color":color,                //轮廓颜色(HEX颜色值)
                "range_height":50,               //围栏高度(单位:米)
                "fill_area":"none"              //底部区域填充类型; 注②
            }
            this.cloudRender.SuperAPI("UpdateRangeStyle", jsondata, (status) => {
                // console.log('updateRange',status);
            })
        },

        showHideCovering(){
            let jsondata = {
                "id":"customPOI_ID",            //覆盖物id
                "covering_type":"poi",    //覆盖物类型, 详见下表
                "bshow":this.isShow = !this.isShow              //true:显示; false:隐藏
            }
            this.cloudRender.SuperAPI("ShowHideCovering", jsondata, (status, progress) => {
                // console.log(status, progress);
            })
        },

        showHidePoi(show){
            let jsondata = {
                "id":this.build5ids,            //覆盖物id
                "covering_type":"poi",    //覆盖物类型, 详见下表
                "bshow":show              //true:显示; false:隐藏
            }
            this.cloudRender.SuperAPI("ShowHideCovering", jsondata, (status,progress) => {
                // console.log(status,progress);
                if('complete' == status && this.isShowBuild5Poi){
                    this.isShowBuild5Poi = false
                }
            })
        },

        splitFloor05(buildId='Build_05',floor=1){
            let jsondata = {
                "build_id":buildId,           //建筑物id (项目中约定)
                "floor":floor,                //要拆解的楼层(1楼为1,地下一楼为-1)
                "animation_type":1               //动画类型 (1:伸缩杆动画)
            }

            this.cloudRender.SuperAPI("SplitBuild", jsondata, (status, progress) => {
            })
        },

        stopRenderCloud() {
            this.cloudRender.SuperAPI("StopRenderCloud");
            setTimeout(() => window.location.reload(), 3e2);
        },

        splitFloor(buildId){
            if(!buildId){
                console.log('id no exist');
                return
            }
            let floor = this.floorParams[buildId][0] = this.floorParams[buildId][0] -1
            if(floor <0){
                this.floorParams[buildId][0] = this.floorParams[buildId][1]
                floor = this.floorParams[buildId][0]
            }
            let jsondata = {
                "build_id":buildId,           //建筑物id (项目中约定)
                "floor":floor,                //要拆解的楼层(1楼为1,地下一楼为-1)
                "animation_type":1               //动画类型 (1:伸缩杆动画)
            }
            this.cloudRender.SuperAPI("SplitBuild", jsondata, (status, progress) => {
                console.log("status", status);
                console.log("progress", progress);
            })            
        },

        setCamera(center_coord,arm_distance,pitch,yaw){
            let jsondata = {
                "covering_type":"poi"   //覆盖物类型, 详见下表
            }     
            this.cloudRender.SuperAPI("RemoveAllCovering", jsondata, (status) => {})
            let params = {
                "coord_type":0,
                "cad_mapkey":"",
                "center_coord":center_coord,//"0.00068,0.000006",
                "arm_distance":arm_distance,//167,
                "pitch":pitch,//31,
                "yaw": yaw,//269,
                "fly":true
            }
            this.cloudRender.SuperAPI("SetCameraInfo", params)    
        },

        async show5device(){
            this.setCamera("0.00068,0.000006",167,31,269)      
            await this.sleep(500)
            this.splitFloor05('Build_05',2)
            this.renderBuildPoi(4)//首页
        },

       async show51(){
            this.setCamera("0.00068,0.000006",167,31,269)
            await this.sleep(500)
            this.splitFloor05('Build_05',1)           
       },

       async show11(){
            this.setCamera("0.000194,0.001484",219,45,92)
            await this.sleep(500)
            this.splitFloor05('Build_01',1)           
       },
       async show12(){
            this.setCamera("0.000194,0.001484",219,45,92)
            await this.sleep(500)
            this.splitFloor05('Build_01',2)           
       },
       async show52(){
            this.setCamera("0.00068,0.000006",167,31,269)        
            await this.sleep(500)
            this.splitFloor05('Build_05',2)           
       },       

       async show222(){
            this.setCamera("0.000915,-0.00025",93.914375,88.164703,267.928589)      
            await this.sleep(500)
            this.splitFloor05('Build_05',2)
            let imgUrl =this.originImgs[0]
            let arr = [ '0.000805,-0.000476',
                        '0.000805,-0.000391',
                        '0.000859,-0.000498',
                        '0.000873,-0.000451',
                        '0.000901,-0.000392',
                        '0.000817,-0.000355',
                        '0.000851,-0.000357',
                        '0.000896,-0.000354',
                        '0.000896,-0.000318',
                        '0.000936,-0.000355',
                        '0.000929,-0.000318']
            for(let i =0 ;i<arr.length;i++){
                let jsondata = {
                    "id":"",
                    "coord_type":0,                         //坐标类型(0:经纬度坐标, 1:cad坐标)
                    "cad_mapkey":"",                        //CAD基准点的Key值, 项目中约定
                    "coord":arr[i],         //POI点的坐标 lng,lat
                    "coord_z":2,                            //高度(单位:米)
                    "coord_z_type":0,                       //坐标高度类型(0:相对3D世界表面；1:相对3D世界地面；2:相对3D世界海拔; 注:cad坐标无效)
                    "always_show_label":false,               //是否永远显示label, true:显示label(默认), false:不显示label
                    "show_label_range":"0,10",            //POI点显示label的范围(单位:米, 范围最小、最大距离; 在此范围内显示, 超出范围隐藏; 注意:always_show_label属性优先于此属性)
                    "sort_order":false,                     //是否开启遮挡排序(根据POI点真实3D位置开启遮挡排序,
                    "state":"state_1",                      //与marker之中images中的define_state对应
                    "marker":{
                        "size":"24,24",                   //marker大小(宽,高 单位:像素)
                        "images":[
                            {
                                "define_state":"state_1",   //marker图片组
                                "normal_url":imgUrl,        //normal 图片url地址
                                "activate_url":imgUrl       //hover, active 图片url地址
                                                //本地图片地址一: "file:///D:/xxx/markerNormal.png",    D: 云渲染所在盘符
                                                //本地图片地址二: "path:/UserData/markerNormal.png",    图片资源由云渲染后台管理, 云渲染4.3.1以上版本
                            }
                        ]
                    },
                    "label":{
                        "bg_image_url":"",      
                                        //本地图片地址一: "file:///D:/xxx/LabelBg.png",    D: 云渲染所在盘符
                                        //本地图片地址二: "path:/UserData/LabelBg.png",    图片资源由云渲染后台管理, 云渲染4.3.1以上版本
                        "bg_size":"1,1", //label大小(宽, 高 单位:像素)
                        "bg_offset":"1,1", //整个label左上角相对于marker的中心点(coord坐标中心点)的偏移(x,y 单位:像素), 注: x为正向右, y为正向上
                        "content": [
                            {
                                "text":["文本内容A", "ff0000ff", "0"],   //[文本内容, HEXA颜色, 文本大小]
                                "text_offset":"1,1"     //文本框左上角相对于label中bg_offset左上角的margin偏移(x,y 单位:像素), 注: x为正向右, y为正向下
                            },
                            {
                                "text":["文本内容B", "00ff00ff", "0"],
                                "text_offset":"1,1"
                            }
                        ]
                    },
                    "window":{
                        "url":"http://superapi.51hitech.com/doc-static/images/static/echarts.html",      
                            //本地地址一: "file:///D:/xxx/echarts.html",    D: 云渲染所在盘符
                        "size":"1,1",      //window大小(宽,高 单位:像素)
                        "offset":"10,20"      //window左上角相对于marker的中心点(coord坐标中心点)的偏移(x,y 单位:像素), 注: x为正向右, y为正向上
                    }
                }
                jsondata.id = `Build_05222-${i}`
                this.cloudRender.SuperAPI("AddCustomPOI", jsondata, () => {

                })
            }
       }

    },
    destroyed () {
        this.cloudRender.SuperAPI("StopRenderCloud");
    },


}
</script>

<style lang="less">
    #app {
    font-family: Avenir, Helvetica, Arial, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-align: center;
    color: #2c3e50;
    margin-top: 60px;
    }

    .chart-show-container{
        height:100%;
        display: block;
    }

    .chart-hide-container{
        height:0;
        display: none;
    }

    .bottom-chart-arrow{
        transition: all 1s;
        height:18px;
        width: 18px;   
    }

    .right-chart-arrow{
        transition: all 1s;     
        transform:rotate(-90deg);
        height:18px;
        width: 18px;   
    }


    .right_arrow{
        transition: all 1s;
        transform:rotate(-90deg);
        position: absolute;
        top:7px;
        left:140px;
        height:17px;
        width: 17px;
    }
    
    .bottom_arrow{
        transition: all 1s;
        position: absolute; 
        top:7px;
        left:140px;
        height:17px;
        width: 17px;    
    }


    .line{
        height:1px;
        background-color: #666;
    }

    .container{
        width: 100%;
        height:100vh;
        position: relative;
        .chart-show{
            top:0;
            right:0;
            position: absolute;
            width: 380px;
            background-color: #27408B80;
            z-index: 199;
            &-arrow{
                top:9px;
                right:20px;
                position: absolute;
            }
            &-set{
                height:35px;
                text-align: center;
                line-height: 35px;
                font-size: 14px;
                background-color:#333;
            }
            &-container{
                
                &-top{
                    height: 400px;
                }
                &-middle{
                    height: 400px;
                }
            }
        }
        .set{
            position: absolute;
            top:200px;
            width:170px;
            font-size: 14px;
            left:10px;
            z-index: 99;
            background-color: #27408B80;
            display: none;
            &-set{
                height:30px;
                text-align: center;
                line-height: 30px;
            }
            &-icon{
                position: absolute;
                top:7px;
                left:140px;
                height:20px;
                width: 20px;
            }
            .view{
                width:160px;
                display: flex;
                padding: 5px;
                .control{
                    width: 40px;
                    text-align: center;
                    font-size: 15px;
                    //background-color: #9ACD3280;
                    &-angle{
                        width:30px;
                        height:30px;
                        margin-left: 5px;
                        margin-top: 10px;
                        border-radius: 50%;
                        line-height: 30px;
                        text-align: center;
                        font-size: 5px;
                        background-color: #9ACD32;
                    }
                }
            }
        }

    }
</style>
<template>
    <div ref='water' :style="{'width':width+'px','height':height+'px'}">

    </div>
</template>

<script>
    import 'echarts-liquidfill/src/liquidFill.js';
    export default {
        

        props: {
            value: {
                type: Number,
                default: 0.5,
            },
            text: {
                type: String,
                default: '总数\n100',
            },            
            color:{
                type: String,
                default: '#52FEF5',              
            },
            width:{
                type: Number,
                default: 64
            },
            height:{
                type: Number,
                default: 64
            },              
        },

        data() {
            return {
                waterCircle: null
            }
        },

        mounted () {
            this.waterCircle = this.$echarts.init(this.$refs.water);
            let color = this.color
            let option = {
                series: [{
                    type: 'liquidFill',
                    data: [0.5],
                    label: {
                        show: true,
                        color: '#ffffff',
                        insideColor: '#fff',
                        fontSize: 10,
                        fontWeight: 'bold',
                        formatter: () => {
                            return this.text;
                        },
                    },
                    color: [color],
                    outline: {
                        show: true,
                        borderDistance: 0,
                        itemStyle: {
                            color: 'none',
                            borderColor: color,
                            borderWidth: 1,
                            shadowBlur: 20,
                            shadowColor: 'rgba(0, 0, 0, 0.25)'
                        }
                    },
                    backgroundStyle: {
                        color: '#00000000'
                    },


                }]
            };
            this.waterCircle.setOption(option)
        },

        beforeDestroy () {
            if(this.waterCircle){
                this.waterCircle.clear()
                this.$echarts.dispose(this.waterCircle)
                this.waterCircle = null  
            }
        },

    }
</script>

<style lang="less" scoped>

</style><template>
    <div class="container" ref='container'>
        <!-- <World3d @render='render3D' ref='world3d'></World3d>    -->
        <div class="controll" @click="triggerCondition" v-show="canplay">
            <img :src="play" alt="">
            <span>{{conditionText}}</span>
        </div>
        <transition name='fade'>
            <div class="home" v-show="show">
                <header class="header">
                    <img src="./assets/logo.png" alt="" class='logo'>
                    <span class='title'>海宁万物工场智慧园区大脑</span>
                    <div class='tab'>
                        <router-link v-for="(item,index) in tabs" :key="index" :to="item.path"> 
                            <div :class="index === currentTab ? 'active' : 'unactive'" @click='cutTab(index)'>{{item.name}}</div>    
                        </router-link>
                    </div>
                    <div class='header-right'>
                        <div class='header-right-time'>
                            <div>{{dateTimer}}</div>
                            <div>{{dateDay}}</div>
                        </div>
                        <div class='cLine'></div>
                        <img :src="require('./assets/'+weatherLogo)" alt="">
                        <div class='header-right-weather'>
                            <div>{{temperature}}℃</div>
                            <div>{{weather}}</div>
                        </div>
                        <div class='cLine'></div>
                        <div class="header-right-data">
                            <div>风力</div>
                            <div class="header-right-data-num">{{windpower}}级</div>
                            <div>风向</div>
                            <div class="header-right-data-num">{{winddirection}}</div>
                            <div>湿度</div>
                            <div class="header-right-data-num">{{humidity}}</div>
                            <div>数据</div>
                            <div class="header-right-data-num">实时</div>
                        </div>
                    </div>
                </header>
                <router-view></router-view>                    
            </div>
        </transition>
        <!-- <audio src='/1047.mp3' ref='audio' loop ></audio> -->
        
    </div>
</template>

<script>
    import { mapState } from 'vuex'
    import World3d from './components/World3d'
    export default {
        components: {
            World3d,
        },

        data() {
            return {
                tabs:[
                    {path:'/',name:'首页'},
                    {path:'/lamp',name:'超级灯联网'},
                    {path:'/energy',name:'智慧节能'},
                    {path:'/parking',name:'智慧停车'},
                    {path:'/safety',name:'智慧安防'}
                ],
                currentTab:0,
                time:null,
                dateInterval:null,
                show:true,// 是否显示数据  主要用于调试
                weatherInterval:null,
                orderInterval:null,
                temperature:25,
                humidity:63,//湿度
                winddirection:'南',
                windpower:'3~4',
                weather:'晴',
                isFirst:true,
                weatherLogo:'晴.png',
                play:require('./assets/pause.png'),
                conditionText:'播放中',
                conditionPlay:0,//0  正在播放 1正在暂停
                canplay:false,
                type:-1,
                lastBeginTime:0,
                ratioX:0.4,
                ratioY:0.6,

                lastPause:0,
            }
        },

        mounted () {
            // this.$loading({ fullscreen: true ,background:"#00000090"})
            this.lastPause = Date.now()
            this.dateInterval =setInterval(()=>{
                this.time = new Date()
            },1000)
            this.getWeather()
            this.weatherInterval =setInterval(()=>{
                this.getWeather()
            },1000 * 60 * 60)
            this.orderInterval = setInterval(()=>{
                this.getOrders()
            },2000)

            setTimeout(()=>{
                this.$refs.audio.play()
            },2000)
            

        },
        destroyed () {
            clearInterval(this.dateInterval)
            clearInterval(this.weatherInterval)
            clearInterval(this.orderInterval)
        },

        methods: {
            cutTab(index){
                this.currentTab = index
            },
            async getWeather(){
                try {
                    let res = await this.$axios.get('https://restapi.amap.com/v3/weather/weatherInfo?key=656ef5d23df5a07d23fb465eb0452e02&city=330481&extensions=base')
                    let live = res.lives && res.lives[0]
                    if(live){
                        this.temperature = live.temperature
                        this.humidity = live.humidity
                        this.windpower = live.windpower
                        this.winddirection = live.winddirection
                        this.weather = live.weather
                    }
                } catch (error) {
                    console.log('weather',weather);
                }
            },

            triggerCondition(){// 1 可以操作
                switch(this.conditionPlay){
                    case 0:
                        this.play = require('./assets/play.png')
                        this.conditionText = '暂停中'
                        this.conditionPlay = 1;
                        break;
                    default:
                        this.play = require('./assets/pause.png')
                        this.conditionText = '播放中'
                        this.conditionPlay = 0;   
                        this.canplay = false
                        this.goonPlay()
                        break;
                }
            },

            async render3D(type){
                if(type != 0){
                    this.canplay = true;
                }else{
                    await this.sleep(5000)
                    this.canplay = true;
                }
                this.type = type;
                // 这是master
                /*
                type:1 开始显示布局
                type：2  开始切换到灯联网
                */
                switch(type){
                    case 0:
                        this.show = false
                        if(this.conditionPlay == 0){
                            this.goonPlay()
                        }
                        break;
                    case 1:
                        await this.sleep(3500)
                        if(this.conditionPlay == 0){
                            this.show = true
                            this.goonPlay()
                        }
                        break;
                    case 2:
                        await this.sleep(500)
                        if(this.conditionPlay == 0){
                            this.goonPlay()
                        }
                        
                        break;
                    case 3:
                        await this.sleep(12000)
                        if(this.conditionPlay == 0){
                            this.goonPlay()
                        }

                        break;
                    case 4:
                        await this.sleep(6000)
                        if(this.conditionPlay == 0){
                            this.goonPlay()            
                        }
                        break;
                    case 5:
                        await this.sleep(12000)
                        if(this.conditionPlay == 0){
                            this.goonPlay()
                        }
                        break;                        
                    default:
                        break;
                }
            },

            sleep(d){
                return new Promise((resolve)=>{
                    setTimeout(resolve,d)
                },d)
            },

            async goonPlay(){
                if((Date.now() - this.lastBeginTime) < 10500) {
                    return
                }
                this.lastBeginTime = Date.now()
                switch(this.type){
                    case 0:
                        this.currentTab = 0
                        this.$router.replace('/')
                        this.trigger3d(0)
                        break;
                    case 1:
                        this.show = true
                        if(this.loopIndex%2==1){
                            await this.sleep(35000)
                        }
                        this.trigger3d(1)
                        break;
                    case 2:
                        this.currentTab = 1
                        this.$router.replace('/lamp')
                        if(this.loopIndex%2==1){
                            await this.sleep(56000)
                        }else{
                            await this.sleep(12000)
                        }
                        this.trigger3d(2)
                        break;
                    case 3:
                        this.currentTab = 2
                        this.$router.replace('/energy')
                        this.trigger3d(3)
                        break;
                    case 4:
                        this.currentTab = 4
                        this.$router.replace('/safety')
                        this.trigger3d(4)   
                        break;
                    case 5:
                        this.currentTab = 0
                        this.$router.replace('/')
                        break;                        
                    default:
                        break;
                } 
            },

            trigger3d(value){
                this.canplay = false;
                this.$refs.world3d.triggerAuto(value)
            },
            
            toHome(){
                if(!this.show) this.show = true
                if(this.$route.path !='/'){
                    this.$router.replace('/')
                    this.currentTab = 0
                }
                this.triggerCondition()
            },

            toLamp(){
                if(!this.show) this.show = true
                if(this.$route.path !='/lamp'){
                    this.$router.replace('/lamp')
                    this.currentTab = 1
                }
                this.triggerCondition()
            },

            toEnergy(){
                if(!this.show) this.show = true
                if(this.$route.path !='/energy'){
                    this.$router.replace('/energy')
                    this.currentTab = 2
                }
                this.triggerCondition()
            },

            toSafety(){
                if(!this.show) this.show = true
                if(this.$route.path !='/safety'){
                    this.$router.replace('/safety')
                    this.currentTab = 4
                }
                this.triggerCondition()
            },

            async executCommand(fn,secFn,thirdFn){
                if(this.canplay){//可以进行操作
                    this.conditionPlay = 0
                    fn.apply(this)
                    secFn && secFn.apply(this)    
                    thirdFn && thirdFn.apply(this)
                }else{//不可进行操作 请等待
                    this.$loading({ fullscreen: true ,background:"#00000080"})
                    for(;;){
                        this.conditionPlay = 1
                        if(!this.canplay){
                            await this.sleep(300)
                        }else{
                            this.$loading({ fullscreen: true ,background:"#00000080"}).close()
                            this.conditionPlay = 0
                            fn.apply(this)
                            secFn && secFn.apply(this)
                            thirdFn && thirdFn.apply(this)
                            break;
                        }
                        
                    }
                }
            },

            async getOrders(){
                try {
                    let res = await this.$axios.get('http://116.236.22.178:39999/controll/x102f?version=1.1&state=home')
                    let command = res && res.command
                    // if(Date.now() - this.lastPause > 1000 * 60 * 30){
                    //     this.lastPause = Date.now()
                    //     this.triggerCondition()
                    // }
                    if(command != '000'){
                        this.lastPause = Date.now()
                        switch(command){
                            case "001":
                                this.executCommand(this.toHome)
                                break;
                            case "002":
                                this.executCommand(this.toLamp)
                                break;
                            case '003':
                                this.executCommand(this.toEnergy)
                                break;
                            case '004':
                                this.executCommand(this.toSafety)
                                break;
                            case '010':
                                if(this.loopIndex %2 ==0){
                                    this.$store.commit('incrementLoop')
                                }
                                this.executCommand(this.toHome)
                                break;     
                            case '012':     
                                if(this.loopIndex %2 ==0){
                                    this.$store.commit('incrementLoop')
                                }                            
                                this.executCommand(this.toLamp)
                                break;     
                            case '014_5':
                                if(this.loopIndex %2 ==1){
                                    this.$store.commit('incrementLoop')
                                }
                                this.executCommand(this.toHome,this.$refs.world3d.show5device,this.triggerCondition)
                                break;          
                            case "025_1":
                                this.executCommand(this.toHome,this.$refs.world3d.show51,this.triggerCondition)
                                break;    
                            case "025_2":
                                this.executCommand(this.toHome,this.$refs.world3d.show52,this.triggerCondition)
                                break; 
                            case "021_1":
                                this.executCommand(this.$refs.world3d.show11,this.triggerCondition)
                                break;
                            case "021_2":
                                this.executCommand(this.$refs.world3d.show12,this.triggerCondition)
                                break;
                            case "011":
                                this.executCommand(this.$refs.world3d.show222,this.triggerCondition)
                                break;
                            case '099':
                                if(this.canplay && this.conditionPlay ==1){
                                    await this.sleep(1000)
                                    this.triggerCondition()
                                }
                                break;
                            default:
                                break;
                        }

                    }
                } catch (error) {
                    console.log('getOrders',error.message);
                }
            }
        },

        watch: {
            weather(newValue, oldValue) {
                if(!newValue) return
                console.log('newValue',newValue);
                if(newValue == '晴'){
                    this.weatherLogo = '晴.png'
                }else if(newValue.indexOf('云') != -1){
                    this.weatherLogo = '多云.png'
                }else if(newValue =='阴'){
                    this.weatherLogo = '阴.png'
                }else if(newValue.indexOf('雨') != -1){
                    if(newValue == '小雨'){
                        this.weatherLogo = '小雨.png'
                    }else if(newValue == '中雨'){
                        this.weatherLogo = '中雨.png'
                    }else if(newValue == '大雨'){
                        this.weatherLogo = '大雨.png'
                    }else if(newValue.indexOf('暴雨') != -1){
                        this.weatherLogo = '暴雨.png'
                    }else if(newValue.indexOf('雷阵雨') != -1){
                        this.weatherLogo = '雷阵雨.png'
                    }else if(newValue.indexOf('阵雨') != -1){
                        this.weatherLogo = '阵雨.png'
                    }else{
                        this.weatherLogo = '中雨.png'
                    }
                }else if(newValue.indexOf('风') != -1){
                    if(newValue.indexOf('龙卷风') != -1){
                        this.weatherLogo = '龙卷风.png'
                    }else{
                        this.weatherLogo = '风.png'
                    }
                }else if(newValue.indexOf('冰雹') != -1){
                    this.weatherLogo = '冰雹.png'
                }else if(newValue.indexOf('雾') !=-1 || newValue.indexOf('霾') !=-1){
                    this.weatherLogo = '雾霾.png'
                }else if(newValue.indexOf('雪') != -1){
                    this.weatherLogo = '雪.png'
                }else{
                    this.weatherLogo = '阴.png'
                }
            }
        },


        computed: {
            ...mapState(['loopIndex']),
            dateTimer() {
                let date=new Date(this.time);
                let hours=date.getHours()<10 ? "0"+date.getHours() : date.getHours();
                let minutes=date.getMinutes()<10 ? "0"+date.getMinutes() : date.getMinutes();
                let seconds=date.getSeconds()<10 ? "0"+date.getSeconds() : date.getSeconds();
            // 拼接
                return hours+":"+minutes+":"+seconds;
            },
            dateDay() {
                let date=new Date(this.time);
                let year=date.getFullYear();
                /* 在日期格式中，月份是从0开始的，因此要加0
                    * 使用三元表达式在小于10的前面加0，以达到格式统一  如 09:11:05
                    * */
                let month= date.getMonth()+1<10 ? "0"+(date.getMonth()+1) : date.getMonth()+1;
                let day=date.getDate()<10 ? "0"+date.getDate() : date.getDate();
                // let hours=date.getHours()<10 ? "0"+date.getHours() : date.getHours();
                // let minutes=date.getMinutes()<10 ? "0"+date.getMinutes() : date.getMinutes();
                // let seconds=date.getSeconds()<10 ? "0"+date.getSeconds() : date.getSeconds();
                // 拼接
                return year+"-"+month+"-"+day;
            }
        },

    }


</script>

<style lang="less" scoped>


.fade-enter{
    opacity: 0;
}
.fade-enter-active{
    transition: opacity 5s;
}

.video{
    width: 1px;
    height:1px;
}

@mainColor:#52FEF5;
a{
    text-decoration:none;
}

.cLine{
    width: 1px;
    height: 40px;
    background-color:@mainColor;
    margin-left: 19px;
}
.container{
    position: relative;
    background: linear-gradient(90deg,#051435FF,#05143500 25%,#05143500 75%,#051435FF);
    height:100vh;
    overflow: hidden;

    .controll{
        position: absolute;
        right: 600px;
        top:100px;
        width: 84px;
        height: 32px;
        background: rgba(0, 28, 56, 0.6);
        border-radius: 16px;
        border: 1px solid #52FEF5;
        z-index: 999;
        display: flex;
        justify-content: center;
        align-items: center;
        img{
            width: 11px;
            height:11px;
        }
        span{
            margin-left: 8px;
            font-size: 12px;
            color: #52FEF5FF;
        }
    }


    .home{
        position: absolute;
        top:0;
        left:0;
        // pointer-events:none;
        // opacity: 0.5;
        //background-color: #2356ad;
        height:100%;
        width:100%;
        display: flex;
        flex-direction: column;

        .header{
            display: flex;
            //justify-content: space-around;
            align-items: center;
            position: relative;
            height:60px;
            // background:linear-gradient(#000000C9,#00000042);
            background: linear-gradient(180deg, rgba(0, 0, 0, 0.79) 0%, rgba(0, 0, 0, 0.26) 100%);
            .logo{
                width:128px;
                height:22px;
                margin-left: 25px;
            }
            .title{
                font-size: 26px;
                margin-left: 9px;
                color:#52FEF5;
            }
            .tab{
                display: flex;
                justify-content: space-between;
                align-items: center;
                flex-basis: 500px;
                height:52px;
                margin-left: 24px;
            }
            &-right{
                position: absolute;
                right:0px;
                left:1300px;
                display: flex;
                // justify-content: space-between;
                align-items: center;
                width: 100%;
                margin-left: 55px;
                img{
                    width: 30px;
                    height: 33px;
                    margin-left: 11px;
                }
                &-time{
                    div:nth-child(1){
                        color:@mainColor;
                        font-size: 24px;
                    }
                    div:nth-child(2){
                        color:white;
                        font-size: 16px;
                    }
                }
                &-weather{
                    margin-left: 12px;
                    div:nth-child(1){
                        color:white;
                        font-size: 16px;
                    }
                    div:nth-child(2){
                        color:white;
                        font-size: 12px;
                    }
                }
                &-data{
                    display: grid;
                    font-size: 12px;
                    color:white;
                    flex-basis: 260px;
                    margin-left: 41px;
                    grid-row-gap: 3px;
                    grid-column-gap: 1px;

                    grid-template-columns: repeat(4, 25%);
                    grid-template-rows: repeat(2, 20px);
                    justify-items: center ;
                    align-items: center;  
                    &-num{  
                        color:@mainColor;
                        justify-self: start;
                    }                     

                }
            }
        }
    }
    .active{
        color: white;
        margin-left: 16px;
        background: linear-gradient(180deg, rgba(17, 68, 137, 0.14) 0%, rgba(7, 32, 81, 0.63) 100%);
        box-shadow: 0px 0px 50px 0px rgba(23, 159, 249, 0.5);
        opacity: 0.63;
        width:88px;
        height:27px;
        font-size: 14px;
        text-align: center;
        border: 1px solid #52FEF5;
        line-height: 27px;
        background-image: url('./assets/unselected.png');
    }
    .unactive{
        margin-left: 16px;
        color: #E4E4E4;
        background-image: url('./assets/unselected.png');
        font-size: 14px;
        width:89px;
        height:27px;        
        text-align: center;
        line-height: 27px;
    }
}
</style>import Vue from 'vue'
import SvgIcon from '../components/svgIcon'// svg component

// register globally
Vue.component('svg-icon', SvgIcon)

const req = require.context('./svg', false, /\.svg$/)
const requireAll = requireContext => requireContext.keys().map(requireContext)
requireAll(req)const { getOptions } = require('loader-utils');

module.exports = function(source) {
    const options = getOptions(this); // getOptions用于获取配置
    const patchUrl = /World3dUrl.s*=.s*\"(.+?)\"/ 
    let result = patchUrl.exec(source) && patchUrl.exec(source)[1]
    if(result.indexOf('http://192.168.3.78:8889')==-1) throw Error('3d地址错误')
    return source
}(function(win, lib) {
    var doc = win.document;
    var docEl = doc.documentElement;
    var metaEl = doc.querySelector('meta[name="viewport"]');
    var flexibleEl = doc.querySelector('meta[name="flexible"]');
    var dpr = 0;
    var scale = 0;
    var tid;
    var flexible = lib.flexible || (lib.flexible = {});
    let rem = 0;

    if (metaEl) {
        console.warn('将根据已有的meta标签来设置缩放比例');
        var match = metaEl.getAttribute('content').match(/initial\-scale=([\d\.]+)/);
        if (match) {
            scale = parseFloat(match[1]);
            dpr = parseInt(1 / scale);
        }
    } else if (flexibleEl) {
        var content = flexibleEl.getAttribute('content');
        if (content) {
            var initialDpr = content.match(/initial\-dpr=([\d\.]+)/);
            var maximumDpr = content.match(/maximum\-dpr=([\d\.]+)/);
            if (initialDpr) {
                dpr = parseFloat(initialDpr[1]);
                scale = parseFloat((1 / dpr).toFixed(2));
            }
            if (maximumDpr) {
                dpr = parseFloat(maximumDpr[1]);
                scale = parseFloat((1 / dpr).toFixed(2));
            }
        }
    }

    if (!dpr && !scale) {
        var isAndroid = win.navigator.appVersion.match(/android/gi);
        var isIPhone = win.navigator.appVersion.match(/iphone/gi);
        var devicePixelRatio = win.devicePixelRatio;
        if (isIPhone) {
            // iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案
            if (devicePixelRatio >= 3 && (!dpr || dpr >= 3)) {
                dpr = 3;
            } else if (devicePixelRatio >= 2 && (!dpr || dpr >= 2)){
                dpr = 2;
            } else {
                dpr = 1;
            }
        } else {
            // 其他设备下，仍旧使用1倍的方案
            dpr = 1;
        }
        scale = 1 / dpr;
    }

    docEl.setAttribute('data-dpr', dpr);
    if (!metaEl) {
        metaEl = doc.createElement('meta');
        metaEl.setAttribute('name', 'viewport');
        metaEl.setAttribute('content', 'initial-scale=' + scale + ', maximum-scale=' + scale + ', minimum-scale=' + scale + ', user-scalable=no');
        if (docEl.firstElementChild) {
            docEl.firstElementChild.appendChild(metaEl);
        } else {
            var wrap = doc.createElement('div');
            wrap.appendChild(metaEl);
            doc.write(wrap.innerHTML);
        }
    }

    function refreshRem(){
        var width = docEl.getBoundingClientRect().width;
        //根据项目的适配范围设置
        if (width / dpr < 1920) {
            width = 1920 * dpr;
        } else if (width / dpr > 5760) {
            width = 5760 * dpr;
        }
        //根据设计稿宽度设置1rem代表多少像素，
        rem = (width / 24) ;
        docEl.style.fontSize = rem + 'px';
        flexible.rem = win.rem = rem;
    }

    win.addEventListener('resize', function() {
        clearTimeout(tid);
        tid = setTimeout(refreshRem, 300);
    }, false);
    win.addEventListener('pageshow', function(e) {
        if (e.persisted) {
            clearTimeout(tid);
            tid = setTimeout(refreshRem, 300);
        }
    }, false);

    if (doc.readyState === 'complete') {
        doc.body.style.fontSize = 12 * dpr + 'px';
    } else {
        doc.addEventListener('DOMContentLoaded', function(e) {
            doc.body.style.fontSize = 12 * dpr + 'px';
        }, false);
    }


    refreshRem();

    flexible.dpr = win.dpr = dpr;
    flexible.refreshRem = refreshRem;
    flexible.rem2px = function(d) {
        var val = parseFloat(d) * this.rem;
        if (typeof d === 'string' && d.match(/rem$/)) {
            val += 'px';
        }
        return val;
    }
    flexible.px2rem = function(d) {
        var val = parseFloat(d) / this.rem;
        if (typeof d === 'string' && d.match(/px$/)) {
            val += 'rem';
        }
        return val;
    }

})(window, window['lib'] || (window['lib'] = {}));<template>
  <div class=container>
    <div id="player" style="display:none;">

    </div>
    <div class="begin">
        <button type="button" class="cloud-btn">Start Now</button>
    </div>
    <div class='chart-show' >
        <div class='chart-show-set'>展示</div>
        <div class='chart-show-arrow' @click="isShowChartSet=!isShowChartSet">
            <svg-icon icon-class="bottom"  :name='isShowChartSet ? "bottom-chart-arrow" : "right-chart-arrow"' :class='[isShowChartSet ? "bottom-chart-arrow" : "right-chart-arrow"]'  ></svg-icon>
        </div>
        <div class = 'line'></div>
        <div :class ="[isShowChartSet? 'chart-show-container' : 'chart-hide-container']">
            <div ref= 'chartShowTop' class='chart-show-container-top'></div>
            <div ref= 'chartShowMiddle' class='chart-show-container-middle'></div>
            <div ref= 'chartShowBottom' class='chart-show-container-bottom'></div>
        </div>

    </div>

    <div class='set'>
        <div class='set-set' >设置</div>
        <div @click="rotateArrow">
            <svg-icon :name='isShowSet ? "bottom_arrow" : "right_arrow"' :class='[isShowSet ? "bottom_arrow" : "right_arrow"]' icon-class="bottom"></svg-icon>
        </div>
        
        <div class = 'line'></div>
        <div class='view' :style="{'display':isShowSet ? 'flex' : 'none'}">
            <div class='control'>
                <div>俯仰</div>
                <div class='control-angle' @click="controll(0,'add')">增加</div>
                <div class='control-angle' @click="controll(0,'sub')">减少</div>
            </div>
            <div class='control' >
                <div>旋转</div>
                <div class='control-angle' @click="controll(1,'add')">增加</div>
                <div class='control-angle' @click="controll(1,'sub')">减少</div>
            </div>
            <div class='control' >
                <div>测量</div>
                <div class='control-angle' @click="measure(0)">开始</div>
                <div class='control-angle' @click="measure(1)">结束</div>
            </div>
            <div class='control' >
                <div>楼层</div>
                <div class='control-angle' @click="floorControl(0)">开始</div>
                <div class='control-angle' @click="floorControl(1)">结束</div>
            </div>
        </div>
    </div>

    
  </div>

</template>

<script>
//import cloudRenderer from "cloudRenderer"
import cloudRenderer from "superapi-51world"
export default {
    name: 'App',
    components: {

    },
    data() {//  西大门 0.000517,-0.000006    南大门 0.000522 -0.000712
        return {
            cloudRender:null,
            isShow:false,
            cloudurl:"https://vizservice.51hitech.com",//云渲染服务地址, 8889:固定端口
            orderID:"aHtHOfAe1h",
            lng: 0.000680,//初始经度   上下  0.000680
            lat:0.000006 ,//初始维度  左右0.000006
            pitch:31,//俯仰角
            yaw:269,//镜头偏航角
            arm_distance:270,//镜头中心距离
            currentFloor:2,
            currentBuildId : 'Build_05',
            isShowBuild5Poi:false,
            isRenderBuild5Poi:false,
            build5ids:[],
            isShowSet:true,
            isShowChartSet:true,
            floorParams:{},
            testPoints:[
                {x:24.75,y:23.65},
                {x:77.375,y:36.655},
                {x:158.640,y:52.745},
                // {x:0,y:0},
                // {x:0,y:70.87},
                // {x:-169.1,y:70.87},
                // {x:-169.1,y:0},
            ],


            echartTop:null,
            echartMiddle:null,
        } 
    },
    async created () {//测试链接
        this.floorParams = {//数组对应当前拆解层数和总层数
            Build_01:[3,3],
            Build_02:[2,2],
            Build_03:[2,2],
            Build_04:[2,2],
            Build_05:[3,3]
        }
        let myHandleResponseFunction = (data)=>{
            let jsonObject = JSON.parse(data);
            if(!jsonObject) return
            let action = jsonObject.args && jsonObject.args.action
            if(action == "mouse_wheel"){
                this.getCameraInfo()
            }
            //console.log('event',jsonObject.func_name)
            switch (jsonObject.func_name) {
                case 'beginPlay':
                    document.querySelector('.begin').style = 'display:none;';
                    break;
                case "OnRangeClick":
                    //const id = jsonObject.args && jsonObject.args.id
                    this.splitFloor(jsonObject.args && jsonObject.args.id)
                    //this.updateRange(jsonObject.args && jsonObject.args.id,'ff0000')
                    break;
                // case 'OnRangeHover':
                //     this.updateRange(jsonObject.args && jsonObject.args.id,'ffff00')
                //     break;
                case 'OnRangeUnHover':
                    this.updateRange(jsonObject.args && jsonObject.args.id,'0000ff')
                    break;

                case 'APIAlready':
                    this.apiAlready()
                    this.addPath()
                    //this.addHeatMap()
                    break;
                case 'OnSuperAPI_Error_Catch':
                    console.log('OnSuperAPI_Error_Catch',jsonObject);
                    break;
                case 'OnPOIClick':
                    console.log('OnPOIClick_id = ' + jsonObject.args.id);
                    break;
                case "OnGetCoord":
                    // console.log('OnGetCoord',jsonObject);
                    break;
            }
            return data;
        }
        this.register()// 注册各种回调事件
        let params  = `order=${this.orderID}&width=${window.innerWidth}&height=${window.innerHeight}`
        let option = {
            url:`${this.cloudurl}/Renderers/Any/order`,
            headers: {
                "Content-type": "application/x-www-form-urlencoded"
            },
            data: params,
        }
        try {
            let res = await this.$axios.post(option)
            console.log('res',res);
            //启动云渲染
            this.cloudRender.SuperAPI("StartRenderCloud", res.data.url);
            //事件注册
            this.cloudRender.SuperAPI("RegisterCloudResponse", myHandleResponseFunction);
        } catch (error) {
            console.log('Renderers',error.message);
        }
    },

    async mounted(){
        let response = await this.$axios.get('/1f_points.json')
        this.testPoints = response
        let cloudBtn = document.querySelector('.cloud-btn');
        cloudBtn.addEventListener('click', (event) => {
            event.preventDefault();
            cloudBtn.setAttribute('disabled', 'disabled');
            cloudBtn.textContent = 'Loading ...';
        }, true)
        window.addEventListener('resize', () => {
            this.echartMiddle.resize();
            this.echartTop.resize()
        });
        setTimeout(this.init,2000)

    },



    methods: {
        
        getIsShowChartSet(){
            return this.isShowChartSet ? "bottom-chart-arrow" : "right-chart-arrow"
        },

        getIsShowSet(){
            return this.isShowSet ? "bottom_arrow" : "right_arrow"
        },

        init() {
            //2.初始化
            this.echartMiddle = this.$echarts.init(this.$refs.chartShowMiddle);
            this.echartTop = this.$echarts.init(this.$refs.chartShowTop);
            // let option = {
            //     legend: {},
            //     tooltip: {},
            //     dataset: {
            //         // 提供一份数据。
            //         source: [
            //             ['product', '2015', '2016', '2017'],
            //             ['Matcha Latte', 43.3, 85.8, 93.7],
            //             ['Milk Tea', 83.1, 73.4, 55.1],
            //             ['Cheese Cocoa', 86.4, 65.2, 82.5],
            //             ['Walnut Brownie', 72.4, 53.9, 39.1]
            //         ]
            //     },
            //     // 声明一个 X 轴，类目轴（category）。默认情况下，类目轴对应到 dataset 第一列。
            //     xAxis: {type: 'category'},
            //     // 声明一个 Y 轴，数值轴。
            //     yAxis: {},
            //     // 声明多个 bar 系列，默认情况下，每个系列会自动对应到 dataset 的每一列。
            //     series: [
            //         {type: 'bar'},
            //         {type: 'bar'},
            //         {type: 'bar'}
            //     ]
            // }
            //3.配置数据
            let optionTop = {
                xAxis:{type:'category'},
                yAxis:{},
                dataset:{
                    source:[
                        ['一月',11,77,'啤酒',20],
                        ['二月',12,47,'咖啡',15],
                        ['三月',31,57,'饮料',22],
                        ['四月',51,97],
                        ['五月',81,127],
                        ['六月',21,37],
                        ['七月',61,47],
                        ['八月',11,77],
                        ['九月',21,17],
                        ['十月',91,97],
                        ['11月',11,27],
                        ['12月',21,77],
                    ]
                },
                series:[
                    {
                        type:'bar',
                        encode:{
                            x:0,
                            y:1
                        }
                    },
                    {
                        type:'line',
                        encode:{
                            x:0,
                            y:2
                        }
                    },
                    {
                        type:'pie',
                        radius:25,
                        center:["75%","20%"],
                        encode:{
                            itemName:3,
                            value:4,
                        }
                    }
                ]
                    

            }


            let option1 = {
                legend: {},
                tooltip: {},
                dataset:{
                    source:[
                        ['product',"啤酒","可乐","八宝粥",'奶茶'],
                        ['2015',40,30,20,10],
                        ['2016',40,30,20,20],
                        ['2017',40,30,20,50],
                        ['2018',40,30,20,30]
                    ]
                },
                xAxis:{type: 'category'},
                yAxis:{},
                series:[
                    {type:'bar'},
                    {type:'bar'},
                    {type:'bar'},
                    {type:'line'},
                    // encode: {
                    //     // 将 "amount" 列映射到 X 轴。
                    //     x: 'amount',
                    //     // 将 "product" 列映射到 Y 轴。
                    //     y: 'product'
                    // }
                ]    
            };
            // 4.传入数据
            this.echartMiddle.setOption(option1);
            this.echartTop.setOption(optionTop)
        },

        register(){
            this.cloudRender = new cloudRenderer("player", 0);
            this.cloudRender.SuperAPI_onRenderCloudError = function() {
                alert('云渲染异常时的处理,请重新刷新')
            };
            this.cloudRender.SuperAPI_onUnavailableRender = function() {
                alert('未获取到渲染资源,请重新刷新')
            };
            this.cloudRender.SuperAPI_onStopedRenderCloud = function() {
                alert('云渲染关闭或通信息中断,请重新刷新')
            }

            this.cloudRender.SuperAPI_onRenderCloudConnected = function() {
                console.log('云服务连接成功,正在进入')
            };

            this.cloudRender.SuperAPI("superAPIinfo", (e) => {
                // console.log("superAPIinfo",e);
            })
        },

        rotateArrow(){
            this.isShowSet = !this.isShowSet
        },

        measure(type){
            let jsondata = {
                    "coord_type":0,          //坐标类型(0:经纬度坐标, 1:cad坐标)
                    "cad_mapkey":""          //CAD基准点Key值, 项目中约定
            }
            switch(type){
                case 0:
                    this.cloudRender.SuperAPI("StartMeasureTool", jsondata, (e) => {
                        // console.log('StartMeasureTool',e);
                    })
                    break;
                case 1:
                    this.cloudRender.SuperAPI("EndMeasureTool")
                    break;
                default:
                break;
            }
        },

        controll(type,addorsub){//type,addorsub
            let opt = {
                "coord_type":0,                                 //坐标类型(0:经纬度坐标, 1:cad坐标)
                "cad_mapkey":"",                                //CAD基准点Key值, 项目中约定
                "center_coord": `${this.lng},${this.lat}`,           //中心点的坐标 lng,lat
                "arm_distance":this.arm_distance,                            //镜头距中心点距离(单位:米)
                "pitch":this.pitch,                                     //镜头俯仰角(5~89)
                "yaw":this.yaw,                                        //镜头偏航角(0正北, 0~359)
                "fly":false                                     //true: 飞行动画(飞行时间根据当前点与目标点计算,则pitch及yaw不生效, 会自行计算);
                                                        //false: 立刻跳转过去(有一个短暂飞行动画,并按照arm_distance, pitch, yaw设置镜头)
            }
            switch(type){
                case 0:// 俯仰角
                    if(addorsub == 'add'){
                        this.pitch += 3
                    }else{
                        this.pitch -= 3
                    }
                    if(this.pitch <=5) this.pitch += 84
                    if(this.pitch >= 89) this.pitch -= 84
                    opt.pitch = this.pitch
                    this.cloudRender.SuperAPI("SetCameraInfo", opt)
                    break;
                case 1:// 旋转
                    if(addorsub == 'add'){
                        this.yaw += 10
                    }else{
                        this.yaw -= 10
                    }
                    if(this.yaw >= 359) this.yaw -= 359
                    if(this.yaw <=0 )this.yaw += 359
                    opt.yaw = this.yaw
                    this.cloudRender.SuperAPI("SetCameraInfo", opt)
                    break;
                default:
                    break;
            }
            console.log(opt.pitch,opt.yaw);
        },

        apiAlready(){
            console.log('APIAlready: 3D世界加载完成');
            // let poiget = {
            //     "coord_type":0,          //坐标类型(0:经纬度坐标, 1:cad坐标)
            //     "cad_mapkey":"",         //CAD基准点Key值, 项目中约定
            //     "coord_z_type":0         //坐标高度类型(0:相对3D世界表面；1:相对3D世界地面；2:相对3D世界海拔; 注:cad坐标无效)
            // }
            // this.cloudRender.SuperAPI("StartGetCoord", poiget, (e) => {
            //     console.log('StartGetCoord',e);
            // })

            let jsondata = {
                "coord_type":0,                                 //坐标类型(0:经纬度坐标, 1:cad坐标)
                "cad_mapkey":"",                                //CAD基准点Key值, 项目中约定
                "center_coord":`${this.lng},${this.lat}`,           //中心点的坐标 lng,lat  0.000522,-0.000712
                "arm_distance":this.arm_distance,                            //镜头距中心点距离(单位:米)
                "pitch":this.pitch,                                     //镜头俯仰角(5~89)
                "yaw":this.yaw,                                        //镜头偏航角(0正北, 0~359)
                "fly":false                                     //true: 飞行动画(飞行时间根据当前点与目标点计算,则pitch及yaw不生效, 会自行计算);
                                                                //false: 立刻跳转过去(有一个短暂飞行动画,并按照arm_distance, pitch, yaw设置镜头)
            }   
            this.cloudRender.SuperAPI("SetCameraInfo", jsondata)
            let point5 = [
                    {
                    "coord": "0.000653,-0.000768"     //坐标点 lng,lat
                    },
                    {
                    "coord": "0.001306,-0.000764"
                    },
                    {
                    "coord": "0.00131,0.0008"
                    },
                    {
                    "coord": "0.000651,0.000813"
                    }
            ]

            let point1 = [
                {"coord":"-0.000614,0.001211"},
                {"coord":"-0.000614,0.002017"},
                {"coord":"0.00049,0.002017"},
                {"coord":"0.00049,0.001214"}
            ]

            let point2 = [
                {"coord":"0.000626,0.001754"},
                {"coord":"0.000626,0.002034"},
                {"coord":"0.001311,0.002034"},
                {"coord":"0.001311,0.001754"}
            ]
            let point3 = [
                {"coord":"0.000645,0.001339"},
                {"coord":"0.000645,0.001603"},
                {"coord":"0.001301,0.001603"},
                {"coord":"0.001301,0.001336"}
            ]   
            let point4 = [
                {"coord":"0.000641,0.000912"},
                {"coord":"0.000641,0.001124"},
                {"coord":"0.001277,0.001124"},
                {"coord":"0.001277,0.000904"}
            ]                     
            this.addRange('Build_01',point1)
            this.addRange('Build_02',point2)
            this.addRange('Build_03',point3)
            this.addRange('Build_04',point4)
            this.addRange('Build_05',point5)


            // for(let i =0 ;i<this.testPoints.length;i++){
            //     let p = this.testPoints[i]
            //     let jsondata1 = {
            //         "id":"origi1111n"+i,
            //         "label":"零点"+i,                   //POI title文本
            //         "coord_type":0,                        //坐标类型(0:经纬度坐标, 1:cad坐标)
            //         "cad_mapkey":"",                       //CAD基准点Key值, 项目中约定
            //         "type":"building",                     //聚合服务筛选类型(部署点聚合数据时自定义, 如 building, alarm ...); 非点聚合时可选
            //         "alert_poi":true,                      //聚合服务筛选类型(部署点聚合数据时自定义, true/false 作用于POI点聚合外观 alarm_image_url); 非点聚合时可选
            //         "coord":this.getOpera(p),         //POI点的坐标 lng,lat
            //         "coord_z":0,                         //高度(单位:米)
            //         "coord_z_type":0,                      //坐标高度类型(0:相对3D世界表面；1:相对3D世界地面；2:相对3D世界海拔; 注:cad坐标无效)
            //         "always_show_label":false,              //是否永远显示title, true:显示title(默认), false:不显示title
            //         "show_label_range":"0,20",           //POI点显示label的范围(单位:米, 范围最小、最大距离; 在此范围内显示, 超出范围隐藏; 注意:always_show_label属性优先于此属性)
            //         "umg_type":"default",                  //此POI所使用的UI模板类型(default: 带线的默认POI UI样式, default_noline:不带线的POI UI样式, 项目中约定)
            //         "sort_order":true                      //是否自动遮挡排序
            //     }
            
            //     this.cloudRender.SuperAPI("AddPOI", jsondata1, (status, progress) => {
            //         console.log("status", progress);
            //     })

            // }
            let jsondataCluster = {
                "data_url":"http://localhost:7009",           //聚合服务地址(云渲染服务IP或域名, 7009: 云渲染后端配置)
                "type":"all",    //building                          //聚合数据筛选POI点类型(部署点聚合服务时自定义, 如 building, alarm ...);
                                                                // "type":"all" 聚合所有类型的POI点
                "open":true,                                    //true:开启点聚合, false:关闭点聚合
                "split_num":10,                                 //聚和区块级别(最小2X2最大10X10, 默认2 ~ 10);
                "use_custom_appearance":false                   //使用POI点聚合外观(true 使用; false 不使用); 注: 使用之前必须定义过POI点聚合外观;
            }
            this.cloudRender.SuperAPI("POICluster", jsondataCluster)

        },

        getOpera(point){
            let lng = -0.00000896 *(point.y) + 0.00130//00000938
            let lat = 0.000009036 * (-point.x) + 0.00079
            // console.log('point',`${lng},${lat}`);
            return `${lng},${lat}`
        },

        renderBuildPoi(){
            // console.log('this.testPoints',this.testPoints.length);
            for(let i =0 ;i<55;i++){
                let poi = this.testPoints[i]
                let jsondata = {
                    "id":"",
                    "coord_type":0,                         //坐标类型(0:经纬度坐标, 1:cad坐标)
                    "cad_mapkey":"",                        //CAD基准点的Key值, 项目中约定
                    "coord":"",         //POI点的坐标 lng,lat
                    "coord_z":4.5,                            //高度(单位:米)
                    "coord_z_type":0,                       //坐标高度类型(0:相对3D世界表面；1:相对3D世界地面；2:相对3D世界海拔; 注:cad坐标无效)
                    "always_show_label":false,               //是否永远显示label, true:显示label(默认), false:不显示label
                    "show_label_range":"0,10",            //POI点显示label的范围(单位:米, 范围最小、最大距离; 在此范围内显示, 超出范围隐藏; 注意:always_show_label属性优先于此属性)
                    "sort_order":false,                     //是否开启遮挡排序(根据POI点真实3D位置开启遮挡排序,
                                                            //注: 只与其他开启排序的POI之间进行排序, 开启此排序会消耗性能(最多60个POI点同时开启排序)
                    "state":"state_1",                      //与marker之中images中的define_state对应
                    "marker":{
                        "size":"12,12",                   //marker大小(宽,高 单位:像素)
                        "images":[
                            {
                                "define_state":"state_1",   //marker图片组
                                "normal_url":"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=502967660,1435924322&fm=26&gp=0.jpg",        //normal 图片url地址
                                "activate_url":"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=502967660,1435924322&fm=26&gp=0.jpg"       //hover, active 图片url地址
                                                //本地图片地址一: "file:///D:/xxx/markerNormal.png",    D: 云渲染所在盘符
                                                //本地图片地址二: "path:/UserData/markerNormal.png",    图片资源由云渲染后台管理, 云渲染4.3.1以上版本
                            }
                        ]
                    }
                }
                jsondata.id = `${this.currentBuildId}-${i}`
                jsondata.coord = this.getOpera(poi)
                this.build5ids.push(jsondata.id)
                setTimeout(()=>{
                    this.cloudRender.SuperAPI("AddCustomPOI", jsondata, (status) => {
                        if(!this.isShowBuild5Poi && status == 'complete'){
                            this.isRenderBuild5Poi = true 
                            this.isShowBuild5Poi = true
                        }
                    })
                },i*80)
            }
        },

        addCustomPOI() {
            let customPOIdata = {
                "id": "customPOI_ID",
                "coord_type": "0",
                "cad_mapkey": "",
                "coord": "0.000564,-0.001886",
                "coord_z": "0",
                "coord_z_type": 0,
                "always_show_label": "true",
                "show_label_range": "0,8000",
                "sort_order": "false",
                "state": "state_1",
                "marker": {
                    "size": "100,228",
                    "images": [{
                        "define_state": "state_1",
                        "normal_url": "http://superapi.51hitech.com/doc-static/images/static/markerNormal.png",
                        "activate_url": "http://superapi.51hitech.com/doc-static/images/static/markerActive.png"
                    }]
                },
                "label": {
                    "bg_image_url": "http://superapi.51hitech.com/doc-static/images/static/LabelBg.png",
                    "bg_size": "200,80",
                    "bg_offset": "50,200",
                    "content": [{
                        "text": ["这是大门吧", "ff0000ff", "30"],
                        "text_offset": "10,5"
                    },
                    {
                        "text": ["文本内容B", "00ff00ff", "20"],
                        "text_offset": "10,45"
                    }
                    ]
                },
                "window":{
                    "url":"http://192.168.88.184:3000/",      
                    "size":"520,350", 
                    "offset":"50,180" 
                }

            };
            this.cloudRender.SuperAPI('RemoveAllPOI');
            this.cloudRender.SuperAPI('AddCustomPOI', customPOIdata)
            this.isShow = true
            setTimeout(() => this.cloudRender.SuperAPI('FocusPOI', { 'id': 'customPOI_ID', 'distance': 300 }), 5e2);
        },

        getCameraInfo() {
            let jsonData = {
                "coord_type": 0,
                "cad_mapkey": ""
            }
            this.cloudRender.SuperAPI('GetCameraInfo', jsonData, (e) => {
                let data = JSON.parse(e)
                let armDistance = data.arm_distance
                if(armDistance >0){
                    this.arm_distance = armDistance
                }
            })
        },

        addPath(){
            let jsondata1 = {
                "id":"id",
                "coord_type":0,                    //坐标类型(0:经纬度坐标, 1:cad坐标)
                "coord_z_type":0,                  //坐标高度类型(0:相对3D世界表面；1:相对3D世界地面；2:相对3D世界海拔; 注:cad坐标无效)
                "cad_mapkey":"",                   //CAD基准点Key值, 项目中约定
                "type":"arrow",                    //样式类型; 注①
                "color":"ff0000",                  //颜色(HEX颜色值, "color":"" 透明路径)
                "pass_color":"ffff00",             //覆盖物移动经过路径颜色(HEX颜色值)
                "width":10,                        //宽度(单位:米)
                "points":[
                    {
                        "coord":"0.000939,-0.002111",
                        "coord_z":0
                    },
                    {
                        "coord":"0.000423,-0.001987",
                        "coord_z":0
                    },
                    {
                        "coord":"0.000402,-0.001099",   //路径坐标点 lng,lat
                        "coord_z":0                //高度(单位:米)
                    }

                ]
            }

            this.cloudRender.SuperAPI("AddPath", jsondata1, (status, progress) => {
                console.log(status, progress);
            })

            let jsondata = {
                "coverings_id": "customPOI_ID",          //要关联Window的覆盖物id (此覆盖物应提前完成创建)
                "coverings_type": "path",           //覆盖物类型 见下表
                "POIData": {
                    "id": "CoverWindow_ID",         //不可和其他poi的id重复
                    "window": {
                    "url": "http://superapi.51hitech.com/doc-static/images/static/echarts.html",
                    "size": "520,350",
                    "offset": "0,0"
                    }
                }
            }
            this.cloudRender.SuperAPI("AddCoverWindow", jsondata)
        },

        addRange(id,points){
            let jsondata = {
                "id":id,
                "coord_type":0,                  //坐标类型(0:经纬度坐标, 1:cad坐标)
                "cad_mapkey":"",                 //CAD基准点Key值, 项目中约定
                "coord_z": 0,                    //高度(单位:米)
                "coord_z_type":0,                //坐标高度类型(0:相对3D世界表面；1:相对3D世界地面；2:相对3D世界海拔; 注:cad坐标无效)
                "type":"box_wave",               //样式类型; 注①
                "color":"0000ff",                //轮廓颜色(HEX颜色值)
                "range_height":30,               //围栏高度(单位:米)
                "fill_area":"none",              //底部区域填充类型; 注②
                "points":points
            }
            this.cloudRender.SuperAPI('RemoveAllCovering', {"covering_type":"range"});
            this.cloudRender.SuperAPI("AddRange", jsondata, (status, progress) => {
                console.log("AddRange", status);
                console.log("AddRange", progress);
            })

        },

        updateRange(id,color){
            let jsondata = {
                "id":id,
                "type":"box_wave",              //样式类型; 注①
                "color":color,                //轮廓颜色(HEX颜色值)
                "range_height":50,               //围栏高度(单位:米)
                "fill_area":"none"              //底部区域填充类型; 注②
            }
            this.cloudRender.SuperAPI("UpdateRangeStyle", jsondata, (status) => {
                console.log('updateRange',status);
            })
        },

        showHideCovering(){
            let jsondata = {
                "id":"customPOI_ID",            //覆盖物id
                "covering_type":"poi",    //覆盖物类型, 详见下表
                "bshow":this.isShow = !this.isShow              //true:显示; false:隐藏
            }
            this.cloudRender.SuperAPI("ShowHideCovering", jsondata, (status, progress) => {
                console.log(status, progress);
            })
        },

        showHidePoi(show){
            let jsondata = {
                "id":this.build5ids,            //覆盖物id
                "covering_type":"poi",    //覆盖物类型, 详见下表
                "bshow":show              //true:显示; false:隐藏
            }
            this.cloudRender.SuperAPI("ShowHideCovering", jsondata, (status,progress) => {
                console.log(status,progress);
                if('complete' == status && this.isShowBuild5Poi){
                    this.isShowBuild5Poi = false
                }
            })
        },

        addHeatMap(){
            let jsondata = {
                "id":"heatmap_id",
                "coord_type":0,                                //坐标类型(0:经纬度坐标, 1:cad坐标)
                "cad_mapkey":"",                               //CAD基准点Key值, 项目中约定
                "coord_z": 11,                                 //高度(单位:米)
                "coord_z_type": 0,                             //坐标高度类型(0:相对3D世界表面; 1:相对3D世界地面; 2:相对3D世界海拔; 注:cad坐标无效)
                "heatmap_type":1,                              //样式类型(1: 投影型, 贴合地面;  2:平面型)
                "leftupper_coord":"0.000653,-0.000768",       //热力区域坐标(左上坐标 lng,lat)
                "leftlower_coord":"0.001306,-0.000764",       //热力区域坐标(左下坐标 lng,lat)
                "rightlower_coord":"0.00131,0.0008",       //热力区域坐标(右下坐标 lng,lat)
                "rightupper_coord":"0.000651,0.000813",      //热力区域坐标(右上坐标 lng,lat)
                "brush_diameter":1700,                         //热力点笔刷直径(单位:米, 单个热力点覆盖直径)
                "heatpoint_minvalue":1,                        //热力点热力值范围最小值(1:绿色接近透明, 100:最红, 线性计算)
                "heatpoint_maxvalue":100,                      //热力点热力值范围最大值
                "data":[
                    {
                        "coord":"0.000982,-0.000017",               //热力数据点的坐标 lng,lat
                        "value":80                             //热力数据点的热力值
                    }
                ]
            }
            this.cloudRender.SuperAPI("AddHeatMap", jsondata, (status) => {
                console.log(status); //成功、失败回调
            })
        },

        floorControl(type){
            switch(type){
                case 0:
                    this.$message('开始楼层拆解了');
                    this.currentFloor = 1
                    this.splitFloor()
                    break;
                case 1:
                    this.$message('结束楼层拆解');
                    this.currentFloor = 2
                    this.splitFloor()
                    break;
                default:
                    break;
            }
        },

        splitFloor(buildId){
            if(!buildId){
                console.log('id no exist');
                return
            }
            let floor = this.floorParams[buildId][0] = this.floorParams[buildId][0] -1
            if(floor <0){
                this.floorParams[buildId][0] = this.floorParams[buildId][1]
                floor = this.floorParams[buildId][0]
            }
            if(floor == 1 && buildId =='Build_05'){
                if(this.isRenderBuild5Poi){
                    this.showHidePoi(true)
                }else{
                    this.renderBuildPoi()
                }
                
            }else{
                this.showHidePoi(false)
            }
            let jsondata = {
                "build_id":buildId,           //建筑物id (项目中约定)
                "floor":floor,                //要拆解的楼层(1楼为1,地下一楼为-1)
                "animation_type":1               //动画类型 (1:伸缩杆动画)
            }
            this.cloudRender.SuperAPI("SplitBuild", jsondata, (status, progress) => {
                console.log("status", status);
                console.log("progress", progress);
            })


        },

        // 关闭场景
        // top cloud rendering service
        stopRenderCloud() {
            this.cloudRender.SuperAPI("StopRenderCloud");
            setTimeout(() => window.location.reload(), 3e2);
        },
    },

    watch: {
        arm_distance(newValue) {//检测镜头距离
            if(newValue > 420 && this.isShowBuild5Poi && this.isRenderBuild5Poi){
                //this.showHidePi(false);
                
            }
            
        }
    },

    destroyed () {
        this.cloudRender.SuperAPI("StopRenderCloud");
    },


}
</script>

<style lang="less">
    #app {
    font-family: Avenir, Helvetica, Arial, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-align: center;
    color: #2c3e50;
    margin-top: 60px;
    }

    .chart-show-container{
        height:100%;
        display: block;
    }

    .chart-hide-container{
        height:0;
        display: none;
    }



    .bottom-chart-arrow{
        transition: all 1s;
        
        height:18px;
        width: 18px;   
    }

    .right-chart-arrow{
        transition: all 1s;     
        transform:rotate(-90deg);
        height:18px;
        width: 18px;   
    }


    .right_arrow{
        transition: all 1s;
        transform:rotate(-90deg);
        position: absolute;
        top:7px;
        left:140px;
        height:17px;
        width: 17px;
    }
    
    .bottom_arrow{
        transition: all 1s;
        position: absolute; 
        top:7px;
        left:140px;
        height:17px;
        width: 17px;    
    }


    .line{
        height:1px;
        background-color: #666;
    }

    .container{
        width: 100%;
        height:100vh;
        position: relative;
        .chart-show{
            top:0;
            right:0;
            position: absolute;
            width: 380px;
            background-color: #27408B80;
            z-index: 199;
            &-arrow{
                top:9px;
                right:20px;
                position: absolute;
            }
            &-set{
                height:35px;
                text-align: center;
                line-height: 35px;
                font-size: 14px;
                background-color:#333;
            }
            &-container{
                
                &-top{
                    height: 400px;
                }
                &-middle{
                    height: 400px;
                }
            }
        }
        .set{
            position: absolute;
            top:200px;
            width:170px;
            font-size: 14px;
            left:10px;
            z-index: 99;
            background-color: #27408B80;
            display: none;
            &-set{
                height:30px;
                text-align: center;
                line-height: 30px;
            }
            &-icon{
                position: absolute;
                top:7px;
                left:140px;
                height:20px;
                width: 20px;
            }
            .view{
                width:160px;
                display: flex;
                padding: 5px;
                .control{
                    width: 40px;
                    text-align: center;
                    font-size: 15px;
                    //background-color: #9ACD3280;
                    &-angle{
                        width:30px;
                        height:30px;
                        margin-left: 5px;
                        margin-top: 10px;
                        border-radius: 50%;
                        line-height: 30px;
                        text-align: center;
                        font-size: 5px;
                        background-color: #9ACD32;
                    }
                }
            }
        }

    }




</style>
<template>
    <div class="container">
        <div class="left">
            <MSection title='园区信息' class='park-info' :padRight='10'>
                <template slot="hint">
                    <div class='park-info-title'>
                        数字展厅
                    </div>
                </template>
                <div class='park-info-top'></div>
                <div class='park-info-text'>园区名称：万物工场</div>
                <div class='park-info-text'>建成年份：2021年</div>
                <div class='park-info-text'>物业公司：海宁国科经开企业服务有限公司</div>
                <div class='park-info-text'>产权归属：海宁智慧港科技产业园开发有限公司</div>
                <div class='park-info-text'>园区地址：浙江省海宁市海宁经济开发区施带路20号</div>
                <div class="linear-line"></div>
                <div class="park-info-data">
                    <div class="park-info-data-grid">
                        <div>152<span>亩</span></div>
                        <div>89262<span>㎡</span></div>
                        <div>15<span>栋</span></div>
                        <div>用地面积</div>
                        <div>总面积</div>
                        <div>楼栋数</div>
                        <div>23<span>个</span></div>
                        <div>6<span>个</span></div>
                        <div>1214<span>㎡</span></div>
                        <div>总入驻企业</div>
                        <div>行业企业</div>
                        <div>剩余出租面积</div>
                    </div>
                    <circleRate title='入驻率' :value='70'></circleRate>
                </div>
            </MSection>

            <MSection title='智慧停车' class='park-parking' :padRight='10'>
                <div class="park-parking-content">
                    <div class='park-parking-content-desc'>{{allplaces}}</div>
                    <div  class='park-parking-content-desc'>{{visiblePlace}}</div>
                    <div class='park-parking-content-desc'>{{unVisiblePlace}}</div>
                    <div>总车位</div>
                    <div>剩余车位</div>
                    <div>已占车位</div>
                </div>
                <div class="park-parking-car">
                    <div class="park-parking-car-data">
                        <div>{{navigationCount}}</div>
                        <div>累积寻车次数</div>
                        <div>{{markCount}}</div>
                        <div>累积标记次数</div>
                    </div>
                    <div class="park-parking-car-chart" ref='parkingCar'></div>
                </div>
                <div class="park-parking-special">
                    <img src='../assets/elec-place.png' />
                    <div>5/19</div>
                    <div>充电车位</div>
                    <img src='../assets/disable-place.png'/>
                    <div>2/3</div>
                    <div>残疾人车位</div>
                </div>            
            </MSection>

            <MSection title='人员统计' class='park-person'>
                <div class="park-person-desc">
                    <div>累积注册用户</div>
                    <div>累积访客数</div>
                    <div class='park-person-desc-name'>日注册用户 2220</div>
                    <div class='park-person-desc-num'>54145</div>
                    <div class='park-person-desc-num'>324000</div>
                    <div class='park-person-desc-name'>日访客数 1976</div>
                </div>
                <div class="park-person-secondTitle">
                    本周来访人数
                </div>
                <div class="park-person-chart" ref='parkPersonChart'>

                </div>            
            </MSection>
        </div>

        <div class="right">
            <MSection title="超级灯联网" class="park-lamp">
                <div class="park-lamp-energyvalue">
                    <div>34278kw</div>
                    <div>2145.06小时</div>
                </div>
                <div class="park-lamp-energyname">
                    <div>累积耗电量</div>
                    <div>累积省电量</div>
                </div>
                <div class="park-lamp-secondTitle">
                    室内导航
                </div>
                <div class="park-lamp-navi">
                    <div class="park-lamp-navi-show">
                        <div class="park-lamp-navi-show-block park-lamp-navi-show-rotate1"></div>
                        <div class="park-lamp-navi-show-text">
                            200万次
                        </div>
                    </div>
                    <div class="park-lamp-navi-data">
                        <div></div>
                        <div>15%</div>
                        <div></div>
                        <div>累积访问量 30万次</div>
                        <div></div>
                        <div>50%</div>
                        <div></div>
                        <div>室内导航累积访问量</div>
                    </div>
                </div>
                <el-dropdown>
                    <el-button type="primary">
                        3月<i class="el-icon-arrow-down el-icon--right"></i>
                    </el-button>
                    <el-dropdown-menu slot="dropdown">
                        <el-dropdown-item>1月</el-dropdown-item>
                        <el-dropdown-item>2月</el-dropdown-item>
                        <el-dropdown-item>3月</el-dropdown-item>
                        <el-dropdown-item>4月</el-dropdown-item>
                        <el-dropdown-item>5月</el-dropdown-item>
                        <el-dropdown-item>6月</el-dropdown-item>
                    </el-dropdown-menu>
                </el-dropdown>
                <div ref='parkLampChart' class='park-lamp-chart'>
                </div>
            </MSection>

            <MSection title='智慧节能' class='park-save'>
                <div class='park-save-select'>
                    <el-dropdown>
                        <el-button type="primary">
                            3月<i class="el-icon-arrow-down el-icon--right"></i>
                        </el-button>
                        <el-dropdown-menu slot="dropdown">
                            <el-dropdown-item>1月</el-dropdown-item>
                            <el-dropdown-item>2月</el-dropdown-item>
                            <el-dropdown-item>3月</el-dropdown-item>
                            <el-dropdown-item>4月</el-dropdown-item>
                            <el-dropdown-item>5月</el-dropdown-item>
                            <el-dropdown-item>6月</el-dropdown-item>
                        </el-dropdown-menu>
                    </el-dropdown>
                </div>
                <div class="park-save-data">
                    <div>54145kw</div>
                    <div>324000m³</div>
                    <div>32000kw</div>
                    <div>累积耗电量</div>
                    <div>累计用水量</div>
                    <div>累积省电量</div>
                </div>
                <div class="park-save-secondTitle">
                    各栋能耗统计
                </div>
                <div ref = 'parkSaveChart' class="park-save-chart">

                </div>
            </MSection>

            <Warn :num='7' class='park-warn'>

            </Warn>
        </div>
  
        <div class="park-device">
            <div class="park-device-header">
                <div class='park-device-header-name'>设备类别</div>
                <div class="park-device-header-tabs">
                    <div v-for="(value,item,index) in devices" 
                        :key="index" :class="index==currentDevice ? 'park-device-header-tabs-active' : 'park-device-header-tabs-unactive'"
                        @click="currentDevice = index"    
                    >{{item}}:{{value}}</div>
                </div>
            </div>
            <div class="park-device-body">
                <img src="../assets/arrow_left.png" alt="">
                <img src="../assets/arrow_right.png" alt="">
                <div class ='park-device-body-container'>
                    <circle-progress v-for="(value,item,index) in allDevices" :key="index" :text='value.one' :score='Math.ceil(value.one * 100/devices.总数)' :width="80" :height="80" :title="item"></circle-progress>
                    <!-- <circleRate title='照明设备' :value='30'></circleRate> -->
                    <!-- <circleRate title='无线传感器' :value='45'></circleRate>
                    <circleRate title='蓝牙网关' :value='15'></circleRate>
                    <circleRate title='开关面板' :value='12'></circleRate>
                    <circleRate title='语音面板' :value='16'></circleRate>
                    <circleRate title='插座' :value='20'></circleRate>
                    <circleRate title='智能门锁' :value='14'></circleRate> -->
                </div>
            </div>
            

        </div>

        <div class="container-video" v-show="loopIndex%2==1">
            <div class="container-video-title">室内导航</div>
            <video @ended='ended' 
                src='/118.mp4' 
                height="500px" width="300px"
                autoplay="true" muted
                loop
            ></video>
        </div>


    </div>
</template>

<script>
    import { mapState } from 'vuex'
    import circleRate from '../components/CircleRate';
    import MSection from '../components/mSection'
    import Warn from '../components/Warn'
    import SmallVideo from '@/components/SmallVideo'
    import circleProgress from '../components/CircleProgress.vue';
    export default {
        components: {
            circleRate,
            MSection,
            Warn,
            SmallVideo,
            circleProgress
        },
        data() {
            return {
                isShowChartSet:true,
                allplaces:185,
                unVisiblePlace:185,
                visiblePlace:0,
                allDevices:{},
                deviceCount:1,
                navigationCount:0,
                markCount:0,
                markRecordLine:[],
                navigationLine:[],
                devices:{
                    '总数':0,
                    '在线':0,
                    '离线':0
                },
                currentDevice:0,
                echartLamp:null,
                echartSave:null,
                echartParking:null,
                echartPerson:null,
            }
        },

        async created () {
            try {
                this.$store.commit('incrementLoop')
                this.getDevices()
                this.getSmartPark()
            } catch (error) {
                console.log('created',error);
            }

        },

        mounted () {
            // this.$store.commit('incrementLoop')
            this.echartLamp = this.$echarts.init(this.$refs.parkLampChart);
            this.echartSave = this.$echarts.init(this.$refs.parkSaveChart);
            this.echartParking = this.$echarts.init(this.$refs.parkingCar)
            this.echartPerson = this.$echarts.init(this.$refs.parkPersonChart)
            setTimeout(this.init,2000)
        },

        beforeDestroy () {
            if(this.echartLamp){
                this.echartLamp.clear()
                this.$echarts.dispose(this.echartLamp)
                this.echartLamp = null  
            }
            if(this.echartSave){
                this.echartSave.clear()
                this.$echarts.dispose(this.echartSave)
                this.echartSave = null                  
            }
            if(this.echartParking){
                this.echartParking.clear()
                this.$echarts.dispose(this.echartParking)
                this.echartParking = null                      
            }

            if(this.echartPerson){
                this.echartPerson.clear()
                this.$echarts.dispose(this.echartPerson)
                this.echartPerson = null                
            }
        },

        destroyed(){
        },

        computed: {
            ...mapState(['loopIndex']),
        },

        methods: {
            destroyChart(chart){
                try {
                    if(!chart) return
                    // chart.clear()
                    this.$echarts.dispose(chart)
                    chart = null  
                } catch (error) {
                    console.log('destroyChart',error);
                }
            },

            async getDevices(){
                try {
                    let res = await this.$request.post('databoard/parking',{
                        "carStream": "0",
                        "usageRate": "0"
                    })
                    let parkingLot = res.result && res.result.parkingLot
                    this.allplaces = parkingLot.total
                    this.visiblePlace = parkingLot.last
                    this.unVisiblePlace = parkingLot.used  
                    
                    let data = await this.$request.post('databoard/deviceStatisticzh')
                    let onlineThan = data.result && data.result.onlineThan
                    // this.allDevices = data.result && data.result.onlineThan
                    this.deviceCount = 0
                    for(let key in onlineThan){
                        if(key == '灯'){
                            this.allDevices['照明设备'] = onlineThan[key]
                            this.deviceCount += onlineThan[key].one - 0
                            this.devices['总数'] += onlineThan[key].one - 0
                            this.devices['在线'] += onlineThan[key].two - 0
                            continue;
                        }
                        if(key != '蓝牙Mesh网关'){
                            this.allDevices[key] = onlineThan[key]
                            this.devices['总数'] += onlineThan[key].one - 0
                            this.devices['在线'] += onlineThan[key].two - 0
                        }
                    }

                    this.devices['离线'] = this.devices['总数'] - this.devices['在线']
                }catch(error) {
                    console.log('getDevices',error);   
                }
            },

            async getSmartPark(){
                try {
                    let res = await this.$request.post('databoard/wisdomParking')
                    let result = res.result
                    if(result){
                        this.markCount = result.markCount
                        this.navigationCount = result.navigationCount

                        let markRecordLine = result.markRecordLine
                        let navigationLine = result.navigationLine
                        let optionCar = {
                            color:['#F6BD16','#FA6400'],
                            legend: {
                                right:20,
                                textStyle:{
                                    color:'#ffffff',
                                    fontSize:10
                                }
                            },
                            xAxis:{
                                type:'category',
                                axisLabel:{
                                    textStyle:{
                                        color:'#fff',
                                        fontSize:10
                                    }
                                }
                            },
                            yAxis:{
                                splitLine:{
                                    show:true,
                                    lineStyle:{
                                        color: ['#FFFFFF2f'],
                                        width: 1,
                                        type: 'solid'
                                    }
                                },
                                axisLabel:{
                                    textStyle:{
                                        color:'#fff',
                                        fontSize:10
                                    }
                                }
                            },
                            grid:{
                                x:30,
                                y:10,
                            },
                            dataset:{
                                source:[
                                    ['0',11,77],
                                    ['2',12,47],
                                    ['4',31,57],
                                    ['6',51,97],
                                    ['8',81,127],
                                    ['10',21,37],
                                    ['12',61,47],
                                    ['14',11,77],
                                    ['16',21,17],
                                    ['18',91,97],
                                    ['20',11,27],
                                    ['22',21,77],
                                ]
                            },
                            series:[
                                {
                                    type:'line',
                                    smooth: true,
                                    name:'标记车位',
                                    areaStyle: {
                                        
                                        color: {
                                            type: 'linear',
                                            x0: 0,
                                            y0: 0,
                                            x2: 0,
                                            y2: 1,
                                            // color:'#F6BD1633',
                                            colorStops: [{
                                                offset: 0,
                                                color: '#F6BD1633',
                                            }, {
                                                offset: 1,
                                                color: '#F6BD1633',
                                            }],
                                            globalCoord: false
                                        },
                                    },  
                                    lineStyle:{
                                        normal:{
                                            color:'#F6BD16',
                                            width: 1,
                                            opacity: 0.9,
                                            curveness: 0.2 ,
                                        }
                                    },   
                                    symbol: 'none',                            
                                    encode:{
                                        x:0,
                                        y:1
                                    }
                                },
                                {
                                    type:'line',
                                    smooth: true,
                                    name:'寻车',
                                    symbol: 'none',
                                    lineStyle: {
                                        normal: {
                                            width: 1,
                                            opacity: 0.9,
                                            curveness: 0.2 ,
                                            color:'#FA6400FF'
                                        }
                                    },
                                    areaStyle: {
                                        color: {
                                            type: 'linear',
                                            x0: 0,
                                            y0: 0,
                                            x2: 0,
                                            y2: 1,
                                            // color:'#F6BD1633',
                                            colorStops: [{
                                                offset: 0,
                                                color: '#F6BD1633',
                                            }, {
                                                offset: 1,
                                                color: '#F6BD1633',
                                            }],
                                            globalCoord: false
                                        },                                
                                    },
                                    encode:{
                                        x:0,
                                        y:2
                                    }
                                }
                            ]   
                        }
                        let markRecordLineObj = {}
                        let navigationLineObj = {}
                        for(let i =0;i<markRecordLine.length;i++){
                            let o = markRecordLine[i]
                            markRecordLineObj[o.x] = o.y
                        }

                        for(let i = 0;i<navigationLine.length;i++){
                            let o = navigationLine[i]
                            navigationLineObj[o.x] = o.y
                        }

                        let carSource = []
                        for(let i=0;i<24;i++){
                            carSource.push(
                                [String(i),markRecordLineObj[String(i)] ? markRecordLineObj[String(i)] : 0 , navigationLineObj[String(i)] ? navigationLineObj[String(i)] : 0]
                            )
                        }
                        optionCar.dataset.source = carSource
                        this.echartParking.setOption(optionCar)

                    }
                } catch (error) {
                    console.log('getSmartPark',error);
                }
            },

            init() {
                //2.初始化
                let optionLamp = {
                    color:['#F6BD16','#FA6400'],
                    legend: {
                        right:20,
                        textStyle:{
                            color:'#ffffff',
                            fontSize:10
                        }
                    },
                    xAxis:{
                        type:'category',
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    yAxis:{
                        splitLine:{
                            show:true,
                            lineStyle:{
                                color: ['#FFFFFF2f'],
                                width: 1,
                                type: 'solid'
                            }
                        },
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }                        

                    },
                    grid:{
                        x:30,
                        y:10,
                    },
                    dataset:{
                        source:[
                            ['1月',11,77],
                            ['2月',12,47],
                            ['3月',31,57],
                            ['4月',51,97],
                            ['5月',81,127],
                            ['6月',21,37],
                            ['7月',61,47],
                            ['8月',11,77],
                            ['9月',21,17],
                            ['10月',91,97],
                            ['11月',11,27],
                            ['12月',21,77],
                        ]
                    },
                    series:[
                        {
                            type:'line',
                            name:'室内导航',
                            smooth: true,
                            areaStyle: {
                                color: {
                                    type: 'linear',
                                    x0: 0,
                                    y0: 0,
                                    x2: 0,
                                    y2: 1,
                                    // color:'#F6BD1633',
                                    colorStops: [{
                                        offset: 0,
                                        color: '#F6BD1633',
                                    }, {
                                        offset: 1,
                                        color: '#F6BD1633',
                                    }],
                                    globalCoord: false
                                },
                            }, 
                            lineStyle:{
                                normal:{
                                    color:'#F6BD16',
                                    width: 1,
                                    opacity: 0.9,
                                    curveness: 0.2 ,
                                }
                            },
                            symbol: 'none',                            
                            encode:{
                                x:0,
                                y:1
                            }
                        },
                        {
                            type:'line',
                            smooth: true,
                            name:'寻车',
                            symbol: 'none',
                            lineStyle: {
                                normal: {
                                    width: 1,
                                    opacity: 0.9,
                                    curveness: 0.2 ,
                                    color:'#FA6400FF'
                                }
                            },
                            areaStyle: {
                                color: {
                                    type: 'linear',
                                    x0: 0,
                                    y0: 0,
                                    x2: 0,
                                    y2: 1,
                                    // color:'#F6BD1633',
                                    colorStops: [{
                                        offset: 0,
                                        color: '#F6BD1633',
                                    }, {
                                        offset: 1,
                                        color: '#F6BD1633',
                                    }],
                                    globalCoord: false
                                },                                
                            },
                            encode:{
                                x:0,
                                y:2
                            }
                        }
                    ]   
                }
                
                let optionSave = {
                    xAxis:{
                        type:'category',
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    yAxis:{
                        splitLine:{
                            show:true,
                            lineStyle:{
                                color: ['#FFFFFF2f'],
                                width: 1,
                                type: 'solid'
                            },
                        },
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    grid:{
                        x:30,
                        y:-30,
                    },
                    dataset:{
                        source:[
                            ['1#',11,77],
                            ['2#',12,47],
                            ['3#',31,57],
                            ['4#',51,97],
                            ['5#',81,127],
                            ['6#',21,37],
                            ['7#',61,47],
                            ['8#',11,77],
                            ['9#',21,17]
                        ]
                    },
                    series:[
                        {
                            type:'bar',
                            smooth: true,                        
                            encode:{
                                x:0,
                                y:1
                            },
                            itemStyle:{//
                                normal:{
                                    color:['#5BC8FEFF']
                                }
                            }
                        },
                        {
                            type:'bar',
                            encode:{
                                x:0,
                                y:2
                            },
                            itemStyle:{//
                                normal:{
                                    color:['#9FFFFAFF']
                                }
                            }                            
                        }
                    ]   
                }

                let optionPerson = {
                    xAxis:{
                        type:'category',
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    
                    },
                    legend: {
                        right:20,
                        textStyle:{
                            color:'#ffff',
                            fontSize:10
                        }
                    },
                    yAxis:{
                        splitLine:{
                            show:true,
                            lineStyle:{
                                color: ['#FFFFFF2f'],
                                width: 1,
                                type: 'solid'
                            }
                        },
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    grid:{
                        x:30,
                        y:10,
                    },
                    dataset:{
                        source:[
                            ['1#',11,77],
                            ['2#',12,47],
                            ['3#',31,57],
                            ['4#',51,97],
                            ['5#',81,127],
                            ['6#',21,37],
                            ['7#',61,47],
                            ['8#',11,77],
                            ['9#',21,17]
                        ]
                    },
                    series:[
                        {
                            type:'bar',
                            name:'日通行员工数',
                            color:'#fff',
                            smooth: true,                        
                            encode:{
                                x:0,
                                y:1
                            },
                            itemStyle:{//
                                normal:{
                                    color:['#32C5FF']
                                },
                                emphasis:{

                                }
                            }
                        },
                        {
                            name:'日通行访客数',
                            type:'bar',
                            encode:{
                                x:0,
                                y:2
                            },
                            itemStyle:{//
                                normal:{
                                    color:['#52FEF5']
                                }
                            }                            
                        }
                    ]   
                }


                this.echartLamp.setOption(optionLamp)
                this.echartSave.setOption(optionSave)
                this.echartPerson.setOption(optionPerson)

            },

            ended(){
                // setTimeout(()=>{
                //     this.$router.replace('/lamp')
                // },1000)
            }
        },



    }
</script>

<style lang="less" scoped>

    /deep/ .el-button {//#FF6700
        height:23px;
        width: 50px;
        padding-top: 5px;
        margin-left: 340px;
        margin-top: 4px;
        span{
            height:20px;
            margin-left: -15px;
            margin-top: -10px;
        }
    }

    @mainColor:#52FEF5;
    @titlePadTop:12px;
    .linear-line{
        margin-top: 9px;
        height: 1px;
        background: linear-gradient(90deg,#8AFFFB0F,#52FEF5FF);
    } 
    .container{
        flex-grow: 1;
        position: relative;

        .left{
            height:100%;
            width: 500px;
            position: relative;
            display: flex;
            flex-direction: column;
            align-content:space-between;
            justify-content: space-between; 
            padding-left: 48px;    

            .park-info{
                margin-top: 19px;
                &-title{
                    font-size: 16px;
                }
                &-top{
                    padding-top:3px;
                }
                &-text{
                    margin-top: 6px;
                    color:white;
                    font-size: 16px;
                }
                &-data{
                    display: flex;
                    &-grid{
                        display: grid;
                        width: 100%;
                        font-size: 16px;
                        margin-top: 16px;
                        color:white;
                        grid-row-gap: 2px;
                        grid-template-columns: repeat(3,33.3%);
                        grid-template-rows: 26px 22px 26px 22px;
                        justify-items: center ;
                        align-items: center;
                        padding-bottom: 20px;
                        span{
                            font-size:14px;
                        }
                        div:nth-child(1){
                            font-size: 21px;
                            color:@mainColor;
    
                        }
                        div:nth-child(2){
                            font-size: 21px;
                            color:#F7B604;
                        }    
                        div:nth-child(3){
                            font-size: 21px;
                            color:#50E3C2
                        }                
                        div:nth-child(7){
                            font-size: 21px;
                            color:#32C5FF
                        }  
                        div:nth-child(8){
                            font-size: 21px;
                            color:#52FEF5
                        }  
                        div:nth-child(9){
                            font-size: 21px;
                            color:#FA6400
                        }
                    }
                }
            }
            
            .park-company{
                margin-top: 24px;
                padding-left: 18px;
                padding-right: 45px;
            // padding-top: @titlePadTop;
                width:357px;
                height:110px;
                font-size: 14px;
                color:white;
                overflow: hidden;
                background: url(../assets/section-top.png)  center top no-repeat,
                url(../assets/section-middle.png)  0 45px no-repeat;
                background-size: 100%;
                position: relative;
                div{
                    margin-top: 12px;
                }
                &-name{
                    color:@mainColor;
                    height:27px;
                    line-height: 27px;
                    font-size: 20px;
                }
                &-desc{
                    position: absolute;
                    color:@mainColor;
                    height:27px;
                    line-height: 27px;
                    font-size: 20px;
                    right:53px;
                    top:8px;
                }
                &-content{
                    display: grid;
                    margin-top: 12px;
                    font-size: 14px;
                    grid-row-gap: 3px;
                    grid-template-columns: repeat(3, 33.33%);
                    grid-template-rows: repeat(2, 21px);
                    justify-items: center ;
                    align-items: center;
                }
            }

            .park-parking{
                margin-top: 19px;
                font-size: 14px;
                height:270px;
                color:white;
                position: relative;
                overflow: hidden;
                &-special{
                    position: absolute;
                    display: grid;
                    right:12px;
                    top:50px;
                    width: 110px;
                    font-size: 11px;
                    grid-column-gap: 16px;
                    grid-template-columns: 32px auto;
                    grid-template-rows: repeat(4, 20px);
                    justify-items: start;
                    align-items: center;     
                    img:nth-child(1){
                        grid-row-start: 1;
                        grid-row-end: 3;
                        background-color: #D8D8D8;
                        width:32px;
                        border-radius: 50%;
                        height:32px;
                    }
                    img:nth-child(4){
                        grid-row-start: 3;
                        grid-row-end: 5;
                        background-color: #D8D8D8;
                        width:32px;
                        border-radius: 50%;
                        margin-top: 5px;
                        height:32px;
                    }  
                }
                &-name{
                    color:@mainColor;
                    height:27px;
                    line-height: 27px;
                    font-size: 20px;
                }

                &-content{
                    &-desc{
                        font-size: 18px;
                        height:24px;
                    }
                    display: grid;
                    width: 232px;
                    font-size: 16px;
                    padding-top: 12px;
                    grid-row-gap: 3px;
                    grid-template-columns: repeat(3, 33.33%);
                    grid-template-rows: 22px 20px;
                    justify-items: center ;
                    align-items: center;   
                    div:nth-child(1){
                        font-size: 21px;
                        color:@mainColor;
                    }
                    div:nth-child(2){
                        font-size: 21px;
                        color:#32C5FF;
                    }
                    div:nth-child(3){
                        font-size: 21px;
                        color:#F7B604;
                    }             
                }
                &-car{
                    text-align: center;
                    margin-top: 21px;
                    display: flex;
                    &-data{
                        width:95px;
                        height:115px;
                        border:1px solid #52FEF5;                    
                        div:nth-child(even){
                            margin-top: 2px;
                            font-size: 12px;
                        }
                        div:nth-child(odd){
                            font-size: 18px;
                            margin-top: 10px;
                        }
                    }
                    &-chart{
                        width:290px;
                        height:160px;
                    }

                }
            }
            .park-person{
                margin-top: 20px;
                height: 301px;
                overflow: hidden;
                &-desc{
                    display: grid;
                    width: 332px;
                    font-size: 14px;
                    padding-top: 10px;
                    color:white;
                    grid-row-gap: 6px;
                    grid-template-columns: repeat(3, 33.33%);
                    grid-template-rows: repeat(2, 20px);
                    justify-items: center ;
                    align-items: center;     
                    &-name{
                        font-size: 12px;
                    }
                    &-num{
                        font-size: 18px;
                    }                
                }
                &-secondTitle{
                    color:@mainColor;
                    margin-top: 12px;
                    font-size: 12px;
                }
                &-chart{
                    margin-top: 10px;
                    height:170px;
                    width: 400px;
                }
            }
        }
        
        .right{
            position: absolute;
            right:0;
            height: 100%;
            width: 468px;
            display: flex;
            flex-direction: column;
            align-content:space-between;
            justify-content: space-between; 
            top:0; 


            .park-lamp{
                height: 380px;
                margin-top: 19px;
                overflow: hidden;
                &-energyvalue{
                    justify-content: center;
                    align-items: center;
                    display: flex; 
                    padding-top: 15px;
                    div:nth-child(1){
                        width:120px;
                        color:@mainColor;
                        font-size: 21px;
                        text-align: center;
                    }    
                    div:nth-child(2){
                        // width:100px;
                        color:#F7B604;
                        font-size: 21px;
                        text-align: center;
                    }                              
                }       
                &-energyname{
                    justify-content: center;
                    align-items: center;
                    display: flex; 
                    color:white;
                    div{
                        width:100px;
                        text-align: center;
                    } 
                }
                &-secondTitle{
                    color: @mainColor;
                }
                &-navi{
                    margin-top: -20px;
                    padding-left: 10px;
                    &-show{
                        width: 120px;
                        height: 120px;
                        position: relative;
                        overflow: hidden;                    
                        &-block{
                            width: 120px;
                            height: 120px;
                            border-left: 15px solid #34C4FF;
                            border-top: 15px solid #34C4FF;
                            border-right: 15px solid #52FEF5;
                            border-bottom: 15px solid #52FEF5;
                            border-radius: 50%;
                            box-sizing: border-box;
                            position: absolute;
                            top: 30%;
                            transition: all ease 0.8s;
                        }
                        &-rotate1{
                            transform: rotate(-45deg);
                        }
                        &-text{
                            text-align: center;
                            top: 75%;
                            color:white;
                            position: absolute;
                            width: 100%;
                        }
                    }
                    &-data{
                        display: grid;
                        width: 232px;
                        right: 30px;
                        top:140px;
                        position: absolute;
                        font-size: 14px;
                        margin-top: 16px;
                        color:white;
                        grid-row-gap: 6px;
                        grid-template-columns: 10% 90%;
                        grid-template-rows: repeat(4, 20px);
                        justify-items: start ;
                        align-items: center;
                        div:nth-child(1){
                            background-color:#34C4FF ;
                            width: 15px;
                            height: 15px;
                            text-align: right;
                        }     
                        div:nth-child(5){
                            background-color:@mainColor ;
                            width: 15px;
                            height: 15px;
                            text-align: right;
                        }                                  
                    }
                } 
                &-chart{
                    height:160px;
                    width:380px;
                }
            }

            .park-save{
                font-size: 14px;
                height:280px;
                overflow: hidden;
                &-select{
                    overflow: hidden;
                    width: 150px;
                    position: absolute;
                    //margin-top: -20px;
                }  
                &-data{
                    padding-top: 5px;
                    display: grid;
                    width: 100%;
                    font-size: 14px;
                    color:white;
                    grid-row-gap: 6px;
                    grid-template-columns: repeat(3,33.3%);
                    grid-template-rows: repeat(2, 20px);
                    justify-items: center ;
                    align-items: center;
                    div:nth-child(1){
                        color:@mainColor;
                        font-size: 21px;
                    }
                    div:nth-child(2){
                        color:#32C5FFFF;
                        font-size: 21px;
                    }
                    div:nth-child(3){
                        color:#F7B604FF;
                        font-size: 21px;
                    }                                
                }    
                &-secondTitle{
                    margin-top: 10px;
                    color: @mainColor;
                }      
                &-chart{
                    margin-top: 10px;
                    height:160px;
                    width: 380px;
                }       
            }

            .park-warn{
                color:white;
                font-size: 14px;
                height: 220px;
                div{
                    margin-top: 6px;
                }          
            }
        }

        .park-device{
            position: absolute;
            width:770px;
            bottom:0;
            left:50%;
            margin-left: -395px;
            &-header{
                background: url(../assets/device-top.webp) ;
                background-size: 100% 100%;
                height:45px;
                padding-left: 20px;
                padding-right: 20px;
                display: flex;
                align-items: flex-end;
                justify-content: space-between;
                &-name{
                    color:@mainColor;
                    height:27px;
                    line-height: 27px;
                    font-size: 20px;
                    padding-bottom: 5px;
                }
                &-tabs{
                    display: flex;
                    font-size: 14px;
                    &-unactive{
                        margin-left: 20px;
                        color:white;
                        height: 30px;
                    }
                    &-active{
                        margin-left: 20px;
                        color:@mainColor;
                        border-bottom: @mainColor solid 2px;
                        height: 30px;
                    }
                }
            }
            
            &-body{
                background: url(../assets/device_main.png);
                background-size: 100% 100%;
                padding-left: 20px;
                padding-right: 20px;
                height: 180px;
                img:nth-child(1){
                    position: absolute;
                    left:14px;
                    top:110px;
                }
                img:nth-child(2){
                    position: absolute;
                    right:14px;
                    top:110px;
                }
                &-container{
                    height:100%;
                    // margin-top: -23px;
                    display: flex;
                    justify-content: space-around;
                    align-items: center;
                }

            }



        }

        &-video{
            width:330px;
            height:570px;
            border-radius: 20px;
            position: absolute;
            display: flex;
            flex-direction: column;
            align-items: center;
            left: 500px;
            top:30px;
            background-image: url(../assets/section-middle.png);
            //background-color: #000;
            background-size:100% 100%;
            &-title{
                color:@mainColor;
                font-size: 18px;
                text-align: center;
                padding: 10px 0;

            }
        }

    }
</style><template>
    <div class='container'>
        <div class="left">
            <MSection class="save-all" title='实时能耗统计'>
                <div class='save-all-data'>
                    <img src="../assets/elec.png" alt="">
                    <img src="../assets/water.png" alt="">
                    <img src="../assets/lamp.png" alt="">
                    <div>54145<span>kw</span> </div>
                    <div>24000<span>m³</span></div>
                    <div>12400<span>kw</span></div>
                    <div>累积耗电量</div>
                    <div>累积用水量</div>
                    <div>累积省电量</div>
                </div>
                <div class="save-all-secondTitle">
                    各栋能耗统计
                </div>
                <div ref='saveAllChart' class='save-all-chart'>
                </div>
            </MSection>
            <div class="save-trend"> 
                <MSection title='能耗趋势'  class="save-trend-section">
                    <div class="save-trend-section-secondTitle">日能耗趋势</div>
                    <div ref='saveTrendDay' class='save-trend-section-chart'></div>
                    <div class="save-trend-section-thirdTitle">月能耗趋势</div>
                    <div ref='saveTrendMonth' class='save-trend-section-chart'></div>
                    <div class="save-trend-section-thirdTitle">年能耗趋势</div>
                    <div ref='saveTrendYear' class='save-trend-section-chart'></div>
                </MSection>
            </div>
        </div>
        <div class="right">
            <MSection title='设备耗电排行' class="save-elec">
                <div class="save-elec-data">
                    <img src="../assets/device.png" alt="">
                    <div  class='save-elec-data-1'>
                        <div>
                            240
                        </div>
                    <div>
                            设备总数
                        </div>
                    </div>
                    <img src="../assets/device_type.png" alt="">
                    <div  class='save-elec-data-1'>
                        <div>
                            8
                        </div>
                    <div>
                            设备类别
                        </div>
                    </div>
                </div>
                <div class="save-elec-secondTitle">设备耗电排行</div>
                <div class='save-elec-charts' ref='saveElecCharts'></div>            
            </MSection>


            <MSection title='设备耗电占比' class="save-percent">
                <div class="save-percent-chart" ref='savePercentChart'>

                </div>
            </MSection>
            <Warn class="save-warn" title='智慧节能'>
            </Warn>
        </div>

    </div>
</template>

<script>
    import MSection from '../components/mSection'
    import Warn from '../components/Warn'
    export default {
        components: {
            MSection,
            Warn
        },
        data() {
            return {
                calcuChart: null,
                trendDayChart: null,
                trendMonthChart: null,
                trendYearChart: null,
                elecChart:null,
                percentChart:null,
            }
        },
        mounted () {
            this.calcuChart = this.$echarts.init(this.$refs.saveAllChart);
            this.trendDayChart = this.$echarts.init(this.$refs.saveTrendDay);
            this.trendMonthChart = this.$echarts.init(this.$refs.saveTrendMonth);
            this.trendYearChart = this.$echarts.init(this.$refs.saveTrendYear);
            this.elecChart = this.$echarts.init(this.$refs.saveElecCharts);
            this.percentChart = this.$echarts.init(this.$refs.savePercentChart)
            setTimeout(this.init,1000)
        },

        methods: {
            init() {
                let optionSave = {
                    xAxis:{
                        type:'category',
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    
                    },
                    legend: {
                        right:20,
                        textStyle:{
                            color:'#ffff',
                            fontSize:10
                        }
                    },
                    yAxis:{
                        splitLine:{
                            show:true,
                            lineStyle:{
                                color: ['#FFFFFF2f'],
                                width: 1,
                                type: 'solid'
                            }
                        },
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    grid:{
                        x:30,
                        y:10,
                    },
                    dataset:{
                        source:[
                            ['1#',11,77],
                            ['2#',12,47],
                            ['3#',31,57],
                            ['4#',51,97],
                            ['5#',81,127],
                            ['6#',21,37],
                            ['7#',61,47],
                            ['8#',11,77],
                            ['9#',21,17]
                        ]
                    },
                    series:[
                        {
                            type:'bar',
                            name:'用电量',
                            color:'#fff',
                            smooth: true,                        
                            encode:{
                                x:0,
                                y:1
                            },
                            itemStyle:{//
                                normal:{
                                    color:['#5BC8FE']
                                },
                                emphasis:{

                                }
                            }
                        },
                        {
                            name:'用水量',
                            type:'bar',
                            encode:{
                                x:0,
                                y:2
                            },
                            itemStyle:{//
                                normal:{
                                    color:['#9FFFFA']
                                }
                            }                            
                        }
                    ]   
                }

                let trendDay = {
                    xAxis:[
                        {
                            type:'category',
                            axisLabel:{
                                textStyle:{
                                    color:'#fff',
                                    fontSize:10
                                }
                            }
                        },
                    ],
                    legend: {
                        right:20,
                        textStyle:{
                            color:'#ffff',
                            fontSize:10
                        }
                    },
                    yAxis:{
                        splitLine:{
                            show:true,
                            lineStyle:{
                                color: ['#FFFFFF2f'],
                                width: 1,
                                type: 'solid'
                            }
                        },
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    grid:{
                        x:30,
                        y:20,
                    },
                    dataset:{
                        source:[
                            ['1月',11,77],
                            ['2月',12,47],
                            ['3月',31,57],
                            ['4月',51,97],
                            ['5月',81,127],
                            ['6月',21,37],
                            ['7月',61,47],
                            ['8月',11,77],
                            ['9月',21,17],
                            ['10月',91,97],
                            ['11月',11,27],
                            ['12月',21,77],
                        ]
                    },
                    series:[
                        {
                            type:'line',
                            smooth: true,
                            name:'电',
                            areaStyle: {
                                normal: {
                                    color: '#2DA7DE80',
                                    origin: "start"
                                }
                            },
                            symbol: 'none',         
                            lineStyle:{
                                normal:{
                                    color:'#2DA7DE',
                                    width: 1,
                                    opacity: 0.9,
                                    curveness: 0.2 ,
                                }
                            },                   
                            encode:{
                                x:0,
                                y:1
                            }
                        },
                        {
                            type:'line',
                            smooth: true,
                            name:'水',
                            symbol: 'none',
                            lineStyle: {
                                normal: {
                                    width: 1,
                                    opacity: 0.9,
                                    curveness: 0.2 ,
                                    color:'#43BDA9'
                                }
                            },
                            areaStyle: {
                                normal: {
                                    color: '#43BDA980',
                                    origin: "start"
                                }
                            },
                            encode:{
                                x:0,
                                y:2
                            }
                        }
                    ]   
                }

                let elecOption = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    legend: {
                        // data: ['2011年', '2012年']
                    },
                    grid: {
                        // left: '3%',
                        // right: '4%',
                        // bottom: '3%',
                        x:80,
                        y:10,
                        // containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        // boundaryGap: [0, 0.01],
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: ['照明设备', '空调', '电机', '蓝牙网关', '无线传感器', '开关面板','语音面板','插座'],
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    series: [
                        {
                            // name: '耗电',
                            type: 'bar',
                            data: [630230,333333,18203, 23489, 29034, 104970, 131744,29065],
                            itemStyle:{//
                                normal:{
                                    color:['#5BC8FEFF']
                                }
                            }
                        }
                    ]
                };

                let persentOption = {
                    legend: {
                        orient: 'vertical',//图例的显示方式  默认横向显示
                        right:40,
                        top:35,
                        textStyle: {//图例中文字的样式
                            color: '#fff',
                            fontSize: 14
                        },
                    },
                    series: [
                        {
                            name: '访问来源',
                            type: 'pie',
                            radius: ['50%', '90%'],
                            center: ['26%', '50%'],//整个饼图在整个父元素中的位置
                            // avoidLabelOverlap: false,
                            label: {
                                show: false,
                                position: 'right'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '10',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: false
                            },
                            data: [
                                {value: 1048, name: '照明设备'},
                                {value: 735, name: '空调'},
                                {value: 580, name: '开关'},
                                {value: 484, name: '蓝牙网关'},
                                {value: 300, name: '电机'}
                            ]
                        }
                    ]
                };



                this.calcuChart.setOption(optionSave)
                this.trendDayChart.setOption(trendDay)
                this.trendMonthChart.setOption(trendDay)
                this.trendYearChart.setOption(trendDay)
                this.elecChart.setOption(elecOption)
                this.percentChart.setOption(persentOption)
            }
        },

        destroyed () {
            if(this.calcuChart){
                this.calcuChart.clear()
                this.$echarts.dispose(this.calcuChart)
                this.calcuChart = null  
            }
            if(this.trendDayChart){
                this.trendDayChart.clear()
                this.$echarts.dispose(this.trendDayChart)
                this.trendDayChart = null                  
            }
            if(this.trendMonthChart){
                this.trendMonthChart.clear()
                this.$echarts.dispose(this.trendMonthChart)
                this.trendMonthChart = null                      
            }

            if(this.trendYearChart){
                this.trendYearChart.clear()
                this.$echarts.dispose(this.trendYearChart)
                this.trendYearChart = null                
            }
            if(this.elecChart){
                this.elecChart.clear()
                this.$echarts.dispose(this.elecChart)
                this.elecChart = null                
            }   
            if(this.percentChart){
                this.percentChart.clear()
                this.$echarts.dispose(this.percentChart)
                this.percentChart = null                
            }           
        },
    }
</script>

<style lang="less" scoped>
    /deep/ .el-button {//#FF6700
        height:23px;
        width: 50px;
        padding-top: 5px;
        margin-left: 340px;
        margin-top: 4px;
        span{
            height:20px;
            margin-left: -15px;
            margin-top: -10px;
        }
    }

    @mainColor:#52FEF5;
    @titlePadTop:12px;
    .container{
        .left{
            height:100%;
            width: 500px;
            position: relative;
            display: flex;
            flex-direction: column;
            align-content:space-between;
            justify-content: space-between; 
            padding-left: 48px;              
            .save-all{
                height: 330px;
                font-size: 14px;
                color:white;
                margin-top: 19px;
                overflow: hidden;  
                &-select{
                    margin-top: -20px;
                }
                &-data{
                    display: grid;
                    padding-top: 12px;
                    font-size: 14px;
                    grid-row-gap: 3px;
                    grid-template-columns: repeat(3, 33.33%);
                    grid-template-rows: 56px 27px 19px;
                    justify-items: center ;
                    align-items: center;
                    img{
                        width:44px;
                        height:44px;
                    }
                    span{
                        font-size: 14px;
                    }
                    div:nth-child(4){
                        color:#52FEF5;
                        font-size:21px;
                    }
                    div:nth-child(5){
                        color:#32C5FFFF;
                        font-size:21px;
                    }
                    div:nth-child(6){
                        color:#50E3C2FF;
                        font-size:21px;
                    }                
                }
                &-secondTitle{
                    margin-top: 15px;
                    color: @mainColor;
                    font-size: 12px;
                }
                &-chart{
                    height:170px;
                    width :400px;
                }
            }
            .save-trend{
                margin-top: 24px;
                &-section{
                    &-secondTitle{
                        padding-top:8px ;
                        color: @mainColor;
                        font-size: 12px;
                    }
                    &-thirdTitle{
                        color: @mainColor;
                        margin-top: -30px;
                        font-size: 12px;
                    }
                    &-chart{
                        width :400px;
                        height:170px;
                    } 
                }
            }
        }

        .right{
            position: absolute;
            right:0;
            height: 100%;
            width: 468px;
            display: flex;
            flex-direction: column;
            align-content:space-between;
            justify-content: space-between; 
            top:0;             
            .save-elec{
                height: 320px;
                font-size: 14px;
                margin-top: 19px;
                color:white;
                overflow: hidden;
                &-data{
                    display: flex;
                    padding-top: 10px;
                    font-size: 14px;
                    justify-content: center ;
                    align-items: center;
                    img{
                        width:54px;
                        height:54px;
                        margin-left: 35px;
                    }
                    &-1{
                        margin-left: 8px;
                        color: @mainColor;
                        font-size: 24px;
                        div:nth-child(2){
                            font-size: 14px;
                            color: white;
                        }
                    }

                } 
                &-secondTitle{
                    margin-top: 15px;
                    color: @mainColor;
                    font-size: 12px;                
                }  
                &-charts{
                    width:400px;
                    height:210px;
                }
            }
            
            .save-percent{
                height: 280px;
                font-size: 14px;
                color:white;
                overflow: hidden;
                &-chart{
                    padding-top: 10px;
                    width:420px;
                    height:200px;
                }
            }

            .save-warn{
                font-size: 14px;
                color:white;
                overflow: hidden;
                div{
                    margin-top: 6px;
                }          
            }
        }


    }
</style><template>
    <div class='container'>
        <div class="left">
            <MSection title='超级灯联网' class='lamp' :padRight="0">
                <SectionCircle :value='60' class="lamp-all"></SectionCircle>
                <div class='lamp-data'>
                    <div class="lamp-data-show"></div>
                    <div>设备数</div>
                    <div>{{devices['总数']}}个</div>
                    <div class="lamp-data-show"></div>
                    <div>离线数</div>
                    <div>{{devices['离线']}}个</div>
                </div>
                <div class="lamp-tabs">
                    <div v-for="(value,item,index) in devices" 
                        :key="index" :class="index==currentDevice ? 'lamp-tabs-active' : 'lamp-tabs-unactive'"
                        @click="currentDevice = index"    
                    >{{item}}:{{value}}</div>
                </div>
                <div class="lamp-devices">
                    <img src="../assets/arrow_left.png" alt="">
                    <img src="../assets/arrow_right.png" alt="">
                    <!-- <div class='lamp-devices-item'> -->
                        <circle-progress v-for="(value,item,index) in allDevices"
                            :key="index" :text='value.one' 
                            :score='Math.ceil(value.one * 100/devices.总数)' 
                            class="lamp-devices-item"
                            :width="80" :height="80" :title="item"
                        ></circle-progress>
                        <!-- <circleRate title='照明设备' :value='55'></circleRate>
                        <circleRate title='传感器' :value='35'></circleRate>
                        <circleRate title='开关' :value='30'></circleRate>
                        <circleRate title='执行器' :value='20'></circleRate>
                        <circleRate title='网关' :value='35'></circleRate>
                        <circleRate title='插座' :value='45'></circleRate> -->
                    <!-- </div>                               -->
                </div>
            </MSection>
            <MSection title='实时耗电统计' class='calcu'>
                <div class='calcu-data'>
                    <div class='calcu-data-value'>30000<span>kw</span></div>
                    <div class='calcu-data-value'>20000<span>kw</span></div>
                    <div class='calcu-data-value'>10000<span>kw</span></div>
                    <div>累积耗电量</div>
                    <div>累积用电量</div>
                    <div>累积耗电量</div>
                </div>
                <div class="calcu-secondTitle">园区实时耗电量统计</div>
                <div ref='calcuChartAll'  class='calcu-chartAll'></div>
                <div class="calcu-secondTitle2">日能耗趋势</div>
                <div ref='calcuChartTrend' class='calcu-chartTrend'></div>
            </MSection>
        </div>
        <div class="right">
            <MSection title='室内导航' class='navi'>
                <div class='navi-name'>累计访问量</div>
                <div ref='naviPie' class='navi-pie'></div>
                <div class='navi-select'>
                    <el-dropdown>
                        <el-button type="primary">
                            3月<i class="el-icon-arrow-down el-icon--right"></i>
                        </el-button>
                        <el-dropdown-menu slot="dropdown">
                            <el-dropdown-item>1月</el-dropdown-item>
                            <el-dropdown-item>2月</el-dropdown-item>
                            <el-dropdown-item>3月</el-dropdown-item>
                            <el-dropdown-item>4月</el-dropdown-item>
                            <el-dropdown-item>5月</el-dropdown-item>
                            <el-dropdown-item>6月</el-dropdown-item>
                        </el-dropdown-menu>
                    </el-dropdown>
                </div>
                <div class='navi-sName'>使用频次</div>
                <div class="navi-line" ref='naviLine'></div>
                <div class='navi-sName'>导航里程</div>
                <div class="navi-bar" ref='naviBar'></div>
            </MSection>
            <Warn :num='20' class='lamp-warn'>
            </Warn>
        </div>

        <div class="container-video" v-show="loopIndex%2==1">
            <!-- <SmallVideo @start='start'></SmallVideo> -->
            <div class="container-video-title">超级灯联网</div>
            <video @ended='ended' 
                src='/119.mp4' 
                height="500px" width="300px"
                autoplay="true" muted
            ></video>
        </div>



    </div>
</template>

<script>
    import MSection from '../components/mSection'
    import SectionCircle from '../components/SectionCircle'
    import circleRate from '../components/CircleRate'
    import Warn from '../components/Warn'
    import SmallVideo from '@/components/SmallVideo'
    import circleProgress from '@/components/CircleProgress.vue';
    import { mapState } from 'vuex'
    export default {

        components: {
            MSection,
            SectionCircle,
            circleRate,
            SmallVideo,
            circleProgress,
            Warn
        },
        data() {
            return {
                currentDevice:0,

                allplaces:185,
                unVisiblePlace:185,
                visiblePlace:0,
                allDevices:{},
                deviceCount:1,
                devices:{
                    '总数':0,
                    '在线':0,
                    '离线':0
                },
                currentDevice:0,
                chartAll:null,
                chartTrend:null,
                chartUsePie:null,
                chartUseRate:null,
                chartnaviWay:null,

            }
        },

        created () {
            this.getDevices();
        },

        mounted () {
            // setTimeout(()=>{
            //     this.$router.replace('/')
            // },68000)
            this.chartAll = this.$echarts.init(this.$refs.calcuChartAll);
            this.chartTrend = this.$echarts.init(this.$refs.calcuChartTrend);
            this.chartUsePie = this.$echarts.init(this.$refs.naviPie)
            this.chartUseRate = this.$echarts.init(this.$refs.naviLine)
            this.chartnaviWay = this.$echarts.init(this.$refs.naviBar)
            setTimeout(this.init,1000)
        },


        beforeDestroy () {
            // this.destroyChart(this.chartAll)
            
            if(this.chartAll){
                this.chartAll.clear()
                this.$echarts.dispose(this.chartAll)
                this.chartAll = null  
            }
            if(this.chartTrend){
                this.chartTrend.clear()
                this.$echarts.dispose(this.chartTrend)
                this.chartTrend = null                  
            }
            if(this.chartUsePie){
                this.chartUsePie.clear()
                this.$echarts.dispose(this.chartUsePie)
                this.chartUsePie = null                      
            }

            if(this.chartUseRate){
                this.chartUseRate.clear()
                this.$echarts.dispose(this.chartUseRate)
                this.chartUseRate = null                
            }
            if(this.chartnaviWay){
                this.chartnaviWay.clear()
                this.$echarts.dispose(this.chartnaviWay)
                this.chartnaviWay = null                
            }
        },
        destroyed () {
            // this.chartAll &&  this.$echarts.dispose(this.chartAll)
            // this.chartTrend &&  this.$echarts.dispose(this.chartTrend)
            // this.chartUsePie &&  this.$echarts.dispose(this.chartUsePie)
            // this.chartUseRate &&  this.$echarts.dispose(this.chartUseRate)
            // this.chartnaviWay &&  this.$echarts.dispose(this.chartnaviWay)

        },

        computed: {
            ...mapState(['loopIndex']),
        },

        methods: {

            async getDevices(){
                try {
                    let res = await this.$request.post('databoard/parking',{
                        "carStream": "0",
                        "usageRate": "0"
                    })
                    let parkingLot = res.result && res.result.parkingLot
                    this.allplaces = parkingLot.total
                    this.visiblePlace = parkingLot.last
                    this.unVisiblePlace = parkingLot.used  
                    
                    let data = await this.$request.post('databoard/deviceStatisticzh')
                    let onlineThan = data.result && data.result.onlineThan
                    // this.allDevices = data.result && data.result.onlineThan
                    this.deviceCount = 0
                    for(let key in onlineThan){
                        if(key == '灯'){
                            this.allDevices['照明设备'] = onlineThan[key]
                            this.devices['总数'] += onlineThan[key].one - 0
                            this.devices['在线'] += onlineThan[key].two - 0
                            continue;
                        }
                        if(key != '蓝牙Mesh网关'){
                            this.allDevices[key] = onlineThan[key]
                            this.devices['总数'] += onlineThan[key].one - 0
                            this.devices['在线'] += onlineThan[key].two - 0
                        }
                    }

                    this.devices['离线'] = this.devices['总数'] - this.devices['在线']
                }catch(error) {
                    console.log('getDevices',error);   
                }
            },

            destroyChart(chart){
                try {
                    if(!chart) return
                    chart.clear()
                    this.$echarts.dispose(chart)
                    chart = null  
                } catch (error) {
                    console.log('destroyChart',error);
                }
            },
            init() {
                let elecAll = {
                    xAxis:[
                        {
                            type:'category',
                            axisLabel:{
                                textStyle:{
                                    color:'#fff',
                                    fontSize:10
                                }
                            }
                        },
                    ],
                    // legend: {
                    //     right:20,
                    //     textStyle:{
                    //         color:'#ffff',
                    //         fontSize:10
                    //     }
                    // },
                    yAxis:{
                        splitLine:{
                            show:true,
                            lineStyle:{
                                color: ['#FFFFFF2f'],
                                width: 1,
                                type: 'solid'
                            }
                        },
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    grid:{
                        x:30,
                        y:20,
                    },
                    dataset:{
                        source:[
                            ['1月',27],
                            ['2月',47],
                            ['3月',57],
                            ['4月',97],
                            ['5月',127],
                            ['6月',37],
                            ['7月',47],
                            ['8月',77],
                            ['9月',17],
                            ['10月',97],
                            ['11月',57],
                            ['12月',27],
                        ]
                    },
                    series:[
                        {
                            type:'line',
                            smooth: true,
                            name:'电',
                            areaStyle: {
                                normal: {
                                    color: {
                                        type: 'linear',
                                        x0: 0,
                                        y0: 0,
                                        x2: 0,
                                        y2: 1,
                                        colorStops: [{
                                            offset: 0,
                                            color: '#2F6CF7FF',
                                        }, {
                                            offset: 1,
                                            color: '#2F6CF71A',
                                        }],
                                        globalCoord: false
                                    },
                                }
                            },    
                            lineStyle:{
                                normal:{
                                    color:'#2F6CF7',
                                    width: 1,
                                    opacity: 0.9,
                                    curveness: 0.2 ,
                                }
                            },                   
                            encode:{
                                x:0,
                                y:1
                            }
                        }
                    ]   
                }

                let elecTrend = {
                    xAxis:[
                        {
                            type:'category',
                            axisLabel:{
                                textStyle:{
                                    color:'#fff',
                                    fontSize:10
                                }
                            }
                        },
                    ],
                    // legend: {
                    //     right:20,
                    //     textStyle:{
                    //         color:'#ffff',
                    //         fontSize:10
                    //     }
                    // },
                    yAxis:{
                        splitLine:{
                            show:true,
                            lineStyle:{
                                color: ['#FFFFFF2f'],
                                width: 1,
                                type: 'solid'
                            }
                        },
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    grid:{
                        x:30,
                        y:20,
                    },
                    dataset:{
                        source:[
                            ['1月',27],
                            ['2月',47],
                            ['3月',57],
                            ['4月',97],
                            ['5月',127],
                            ['6月',37],
                            ['7月',47],
                            ['8月',77],
                            ['9月',17],
                            ['10月',47],
                            ['11月',27],
                            ['12月',97],
                        ]
                    },
                    series:[
                        {
                            type:'line',
                            smooth: true,
                            name:'电',
                            areaStyle: {
                                normal: {
                                    color: {
                                        type: 'linear',
                                        x0: 0,
                                        y0: 0,
                                        x2: 0,
                                        y2: 1,
                                        colorStops: [{
                                            offset: 0,
                                            color: '#0CB4DAFF',
                                        }, {
                                            offset: 1,
                                            color: '#0DB1D61A',
                                        }],
                                        globalCoord: false
                                    },
                                }
                            },    
                            lineStyle:{
                                normal:{
                                    color:'#0CB4DAFF',
                                    width: 1,
                                    opacity: 0.9,
                                    curveness: 0.2 ,
                                }
                            },                   
                            encode:{
                                x:0,
                                y:1
                            }
                        }
                    ]   
                }     
                
                let elecUsePie = {
                    legend: {
                        orient: 'vertical',//图例的显示方式  默认横向显示
                        right:40,
                        top:35,
                        textStyle: {//图例中文字的样式
                            color: '#fff',
                            fontSize: 14
                        },
                    },
                    series: [
                        {
                            name: '访问来源',
                            type: 'pie',
                            radius: ['50%', '90%'],
                            center: ['26%', '50%'],//整个饼图在整个父元素中的位置
                            // avoidLabelOverlap: false,
                            label: {
                                show: false,
                                position: 'right'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '10',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: false
                            },
                            data: [
                                {value: 1048, name: '访问量'},
                                {value: 735, name: '导航'},
                                {value: 580, name: '注册'},
                                {value: 484, name: '使用'},
                            ]
                        }
                    ],
                    color:['#058FE0FF', '#2DEAF8FF','#F4D98CFF','#DE7F7CFF']
                };

                let useRate = {
                    xAxis:[
                        {
                            type:'category',
                            name:'时',
                            nameTextStyle:{
                                color:'#fff'
                            },
                            axisLabel:{
                                textStyle:{
                                    color:'#fff',
                                    fontSize:10
                                }
                            }
                        },
                    ],
                    legend: {
                        right:20,
                        textStyle:{
                            color:'#ffff',
                            fontSize:10
                        }
                    },
                    yAxis:{
                        splitLine:{
                            show:true,
                            lineStyle:{
                                color: ['#FFFFFF2f'],
                                width: 1,
                                type: 'solid'
                            }
                        },
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    grid:{
                        x:30,
                        y:20,
                    },
                    dataset:{
                        source:[
                            ['0',11,77],
                            ['3',12,47],
                            ['6',31,57],
                            ['9',51,97],
                            ['12',81,127],
                            ['15',21,37],
                            ['18',61,47],
                            ['21',11,77],
                            ['24',21,17],
                        ]
                    },
                    series:[
                        {
                            type:'line',
                            smooth: true,
                            name:'室内导航',
                            areaStyle: {
                                normal: {
                                    color: '#2DA7DE80',
                                    origin: "start"
                                }
                            },
                            symbol: 'none',         
                            lineStyle:{
                                normal:{
                                    color:'#2DA7DE',
                                    width: 1,
                                    opacity: 0.9,
                                    curveness: 0.2 ,
                                }
                            },                   
                            encode:{
                                x:0,
                                y:1
                            }
                        },
                        {
                            type:'line',
                            smooth: true,
                            name:'寻车',
                            symbol: 'none',
                            lineStyle: {
                                normal: {
                                    width: 1,
                                    opacity: 0.9,
                                    curveness: 0.2 ,
                                    color:'#43BDA9'
                                }
                            },
                            areaStyle: {
                                normal: {
                                    color: '#43BDA980',
                                    origin: "start"
                                }
                            },
                            encode:{
                                x:0,
                                y:2
                            }
                        }
                    ]   
                }

                let useWay = {
                    xAxis:{
                        type:'category',
                        name:'时长',
                        nameTextStyle:{
                            color:'#fff'
                        },
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    
                    },
                    legend: {
                        right:20,
                        textStyle:{
                            color:'#ffff',
                            fontSize:10
                        }
                    },
                    yAxis:{
                        splitLine:{
                            show:true,
                            lineStyle:{
                                color: ['#FFFFFF2f'],
                                width: 1,
                                type: 'solid'
                            }
                        },
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    grid:{
                        x:30,
                        y:10,
                    },
                    dataset:{
                        source:[
                            ['10',11,77],
                            ['20',12,47],
                            ['30',31,57],
                            ['40',51,97],
                            ['50',81,127],
                            ['60',21,37],
                            ['70',61,47],
                            ['80',11,77],
                            ['90',21,17]
                        ]
                    },
                    series:[
                        {
                            type:'bar',
                            name:'室内导航',
                            color:'#fff',
                            smooth: true,                        
                            encode:{
                                x:0,
                                y:1
                            },
                            itemStyle:{//
                                normal:{
                                    color:['#04C4E2']
                                },
                                emphasis:{

                                }
                            }
                        },
                        {
                            name:'寻车',
                            type:'bar',
                            encode:{
                                x:0,
                                y:2
                            },
                            itemStyle:{//
                                normal:{
                                    color:['#1853F5']
                                }
                            }                            
                        }
                    ]   
                }

                this.chartAll.setOption(elecAll)
                this.chartTrend.setOption(elecTrend)
                this.chartUsePie.setOption(elecUsePie)
                this.chartUseRate.setOption(useRate)
                this.chartnaviWay.setOption(useWay)
            },
            start(){
                setTimeout(()=>{
                    this.$router.replace('/')
                },2000)
            },
            ended(){
                
            }
        },
    }
</script>

<style lang="less" scoped>
    /deep/ .el-button {//#FF6700
        height:23px;
        width: 50px;
        padding-top: 5px;
        margin-left: 340px;
        margin-top: 4px;
        background:linear-gradient(#52FEF512,#52FEF554);
        span{
            height:20px;
            margin-left: -15px;
            margin-top: -10px;
        }
    }
    @mainColor:#52FEF5;
    .container{
        .left{
            height:100%;
            width: 500px;
            position: relative;
            display: flex;
            flex-direction: column;
            align-content:space-between;
            justify-content: space-between; 
            padding-left: 48px;  
            padding-bottom: 20px;
            .lamp{
                margin-top: 15px;
                &-all{
                    padding-top: 8px;
                }
                &-data{
                    display: grid;
                    position: absolute;
                    top:90px;
                    width:200px;
                    left:160px;
                    font-size: 12px;
                    color:white;
                    grid-gap: 6px;
                    grid-template-columns: 20px 60px 60px;
                    grid-template-rows: repeat(2, 16px);
                    justify-items: center ;
                    align-items: center;
                    &-show:nth-child(1){
                        background-color:#32C5FFFF;
                        width: 12px;
                        height:12px;
                    }
                    &-show:nth-child(4){
                        background-color:#52FEF5FF;
                        width: 12px;
                        height:12px;
                    }
                }
                &-tabs{
                    position: absolute;
                    display: flex;
                    top:136px;
                    left:260px;
                    font-size: 12px;
                    &-unactive{
                        margin-left: 10px;
                        color:white;
                        height: 19px;
                        line-height: 19px;
                    }
                    &-active{
                        margin-left: 10px;
                        color:@mainColor;
                        border-bottom: @mainColor solid 2px;
                        height: 19px;
                        line-height: 19px;
                    }
                }



                &-devices{
                    margin-top: -40px;
                    height: 280px;
                    position: relative;
                    display: flex;
                    justify-content: space-around;
                    align-items: center;
                    flex-wrap:wrap;
                    img:nth-child(1){
                        top:100px;
                        position: absolute;
                        left:-5px;
                    }
                    img:nth-child(2){
                        top:100px;
                        position: absolute;
                        right:0;
                    }
                    &-item{
                        flex-basis: 25%;
                    }
                }

                    
            }
            .calcu{
                height:425px;
                &-data{
                    padding-top: 15px;
                    display: grid;
                    width:400px;
                    font-size: 12px;
                    color:white;
                    grid-gap: 3px;
                    grid-template-columns: repeat(3,33.3%);
                    grid-template-rows: 30px 20px;
                    justify-items: center ;
                    align-items: center;
                    div{
                        text-align: center;
                    }
                    div:nth-child(1){
                        font-size: 26px;
                        color:#52FEF5FF;
                    }
                    div:nth-child(2){
                        font-size: 26px;
                        color:#32C5FFFF;
                    }
                    div:nth-child(3){
                        font-size: 26px;
                        color:#2096F9FF;
                    }
                    span{
                        font-size:12px;
                    }
            
                }
                &-secondTitle{
                    margin-top: 15px;
                    color: white;
                    font-size: 16px;
                }
                &-secondTitle2{
                    margin-top: -20px;
                    color: white;
                    font-size: 16px;
                }            
                &-chartAll{
                    width:400px;
                    height:160px;
                }
                &-chartTrend{
                    width: 400px;
                    height:160px;
                }
            }
        }

        .right{
            position: absolute;
            right:0;
            height: 100%;
            width: 468px;
            display: flex;
            flex-direction: column;
            align-content:space-between;
            justify-content: space-between; 
            padding-bottom: 20px;
            top:0; 
            .navi{
                margin-top: 19px;
                &-name{
                    padding-top: 12px;
                    color:white;
                    height:20px;
                    line-height: 20px;
                    font-size: 16px;                
                }

                &-sName{
                    margin-top: -10px;
                    color:white;
                    height:20px;
                    line-height: 20px;
                    font-size: 16px;                
                }
                &-pie{
                    width:400px;
                    height:120px;
                }
                &-line{
                    width:400px;
                    height:180px;
                }     
                &-bar{
                    width:400px;
                    height:180px;
                }       
                &-select{
                    margin-top: -20px;
                }
            }
            .lamp-warn{
            
                &-item{
                    color:white;
                    font-size: 14px;
                    margin-bottom: 12px;
                }
            }
        }

        &-video{
            width:330px;
            height:570px;
            border-radius: 20px;
            position: absolute;
            display: flex;
            flex-direction: column;
            align-items: center;
            left: 500px;
            top:30px;
            background-image: url(../assets/section-middle.png);
            //background-color: #000;
            background-size:100% 100%;
            &-title{
                color:@mainColor;
                font-size: 18px;
                text-align: center;
                padding: 10px 0;

            }
        }



    }

</style>import router from './router'
const whiteList = ['/login','/test'] // 无需令牌白名单

router.beforeEach(async (to, from, next)=>{
    let hasCookie = window.localStorage.getItem('cookie')
    if(hasCookie){
        next()
    }else{
        if (whiteList.indexOf(to.path) !== -1) {
            // 白名单中路由放过
            next()
          } else {
            // 重定向至登录页
            next(`/login`)
          }
    }
})import Vue from 'vue'
//import './permission'
//import './lib/flexible'
import Entry from './Entry.vue'
import * as echarts from "echarts";
import ElementUI from 'element-ui';
import 'element-ui/lib/theme-chalk/index.css';
import less from 'less'
import store from './store'
import api from './api/http'
import request from './api/request'
import router from './router'
import './icons/index'
 
Vue.use(ElementUI);


Vue.use(less)
Vue.prototype.$echarts = echarts;
Vue.prototype.$axios = request
Vue.prototype.$request = api
// Vue.prototype.$http = http
Vue.config.productionTip = false

new Vue({
    router,
    store,
    render: h => h(Entry),
}).$mount('#app')
<template>
    <div class='contanier'>
        <div class="demo-input-suffix">
            <span>用户名</span>
            <el-input
                placeholder="请输入姓名"
                v-model="input1">
            </el-input>
        </div>
        <div class="demo-input-suffix">
            <span>密码</span>
            <el-input
                placeholder="请输入密码"
                show-password
                v-model="input2">
            </el-input>
        </div>
        <el-button type="primary" @click="login">登录</el-button>
    </div>
</template>

<script>
    export default {
        data() {
            return {
                inputUserName:'',
                inputPwd:'',
                input1:'',
                input2:''
            }
        },
        methods: {
            login() {
                //this.$store.state.cookie = this.input1 ? this.input1:"visitor"
                //this.$store.commit('setCookie',this.input1 ? this.input1:"visitor")
                window.localStorage.setItem('cookie',this.input1 ? this.input1:"visitor")
                this.$router.push({
                    path:'/'
                })
            }
        },
    }
</script>

<style lang="less" scoped>

    span{
        width:70px;
        display: inline-block;
    }
    .el-input {
        width: 230px;
    }
    .el-input .el-input-group__prepend{
        background-color: #fff;
        width: 100px;
    }
    .contanier{
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }
    .demo-input-suffix{
        margin-bottom: 20px;
    }
</style><template>
    <div class="parking">
        <div class="parking-left">
            <m-section title='车位统计' :padRight='10' v-if="Object.keys(overground).length">
                <div class="parking-left-top" >
                    <div class="parking-left-top-single" >
                        <div class="parking-left-top-single-car" >
                            <div>总车位</div>
                            <circle-progress :width='80' :height='80' :score='100' :text="Number(overground.totalLot) + Number(underground.totalLot)"></circle-progress>
                        </div>
                        <div class="parking-left-top-single-car">
                            <div>剩余车位</div>
                            <circle-progress :width='80' :height='80' :score='100 - userRate' :text="Number(overground.totalLot) + Number(underground.totalLot) -Number(overground.usedLot) - Number(underground.usedLot)"></circle-progress>
                        </div>
                        <div class="parking-left-top-single-car">
                            <div>已占用</div>
                            <circle-progress :width='80' :height='80' :score='userRate' :text="Number(overground.usedLot) + Number(underground.usedLot)"></circle-progress>
                        </div>
                    </div>
                    <!-- <div class="parking-left-top-special">
                        <img src='../assets/elec-place.png' />
                        <div>5/19</div>
                        <div>充电车位</div>
                        <img src='../assets/disable-place.png'/>
                        <div>2/3</div>
                        <div>残疾人车位</div>
                    </div>  -->
                </div>
                <div class="line"></div>
                <div class="parking-left-middle">
                    <shan-progress content='地上总车位' :text="overground.totalLot" ></shan-progress>
                    <shan-progress content='地上剩余车位' :text="overground.totalLot - overground.usedLot"></shan-progress>
                    <shan-progress content='地上占用车位' :text="overground.usedLot"></shan-progress>
                </div>
                <div class="parking-left-bottom">
                    <shan-progress content='地下总车位' :text="underground.totalLot"></shan-progress>
                    <shan-progress content='地下剩余车位' :text="underground.totalLot - underground.usedLot"></shan-progress>
                    <shan-progress content='地下占用车位' :text="underground.usedLot"></shan-progress>
                </div>
            </m-section>
            <m-section title='闸机数量统计' class="parking-left-gate" :padRight='10'>
                <water-progress ></water-progress>
                <water-progress color="#32C5FF"></water-progress>
                <water-progress color='#2095F9'></water-progress>
                <div ref='gate' class="parking-left-gate-chart"></div>
            </m-section>
            <m-section title='停车类型日汇总' :padRight='25'>
                <div ref='parks' class="parking-left-parks"></div>
                <div class="parking-left-title">
                    <div v-for="(item,index) in parksTitle" :key='index'>{{item}}</div>
                </div>
                <div class='parking-left-today'>
                    <div class='parking-left-today-space'></div>
                    <img src="@/assets/on.png" />
                    <div class='parking-left-today-content'>入场</div>
                    <div class='parking-left-today-content'>{{dayCar.todayDataInNum}}</div>
                    <div class='parking-left-today-rate'>
                        <div></div>
                        <div></div>
                    </div>
                    <div class='parking-left-today-content'>{{dayCar.nowDataInNum}}</div>
                    <img class='parking-left-today-trend' src="@/assets/up.png" alt=""/>
                    <div class='parking-left-today-content'>{{Math.floor( (dayCar.todayDataInNum-dayCar.nowDataInNum)/dayCar.todayDataInNum* 10000)/100}}%</div>
                    <div class='parking-left-today-space'></div>
                </div>
                <div class='parking-left-today'>
                    <div class='parking-left-today-space'></div>
                    <img src="@/assets/out.png" />
                    <div class='parking-left-today-content'>离场</div>
                    <div class='parking-left-today-content'>{{dayCar.todayDataOutNum}}</div>
                    <div class='parking-left-today-rate'>
                        <div></div>
                        <div></div>
                    </div>
                    <div class='parking-left-today-content'>{{dayCar.nowDataOutNum}}</div>
                    <img class='parking-left-today-trend' src="@/assets/up.png" alt=""/>
                    <div class='parking-left-today-content'>{{Math.floor( (dayCar.todayDataOutNum-dayCar.nowDataOutNum)/dayCar.todayDataOutNum* 10000)/100}}%</div>
                    <div class='parking-left-today-space'></div>
                </div>
                <div class='parking-left-today'>
                    <div class='parking-left-today-space'></div>
                    <img src="@/assets/in.png" />
                    <div class='parking-left-today-content'>在场</div>
                    <div class='parking-left-today-content'>{{dayCar.todayDataOnNum}}</div>
                    <div class='parking-left-today-rate'>
                        <div></div>
                        <div></div>
                    </div>
                    <div class='parking-left-today-content'>{{dayCar.nowDataOnNum}}</div>
                    <img class='parking-left-today-trend' src="@/assets/up.png" alt=""/>
                    <div class='parking-left-today-content'>{{Math.floor( (dayCar.todayDataOnNum-dayCar.nowDataOnNum)/dayCar.todayDataOnNum* 10000)/100}}%</div>
                    <div class='parking-left-today-space'></div>
                </div>
            </m-section>
        </div>
        <div class="parking-right">
            <m-section class="parking-right-con" title="智慧停车">
                <div class="parking-right-con-ptop">
                    <img src="@/assets/ptop.png" alt="">
                    <div>2600</div>
                    <div>累积寻车次数</div>
                </div>
                <div class="parking-right-con-pbottom">
                    <img src="@/assets/pbottom.png" alt="">
                    <div>2600</div>
                    <div>累积寻车次数</div>
                </div>  
                <div ref='allCars' class="parking-right-con-cars"></div>              
            </m-section>
            <m-section title="停车时长">
                <div ref='parkTimer' class="parking-right-time">

                </div>
                <div class="parking-right-secondTitle">
                    车位利用率
                </div>
                <div  ref= 'parkRate' class="parking-right-rate"></div>
            </m-section>
            <warn :type='3'></warn>
        </div>

        <div class="parking-video">
            <!-- <SmallVideo @start='start'></SmallVideo> -->
            <div class="parking-video-title">停车导航</div>
            <video  
                src='/119.mp4' 
                height="500px" width="350px"
                autoplay="true" muted
            ></video>
        </div>

        <div class="parking-video">
            <!-- <SmallVideo @start='start'></SmallVideo> -->
            <div class="parking-video-title">停车导航</div>
            <video  
                src='/119.mp4' 
                height="500px" width="350px"
                autoplay="true" muted
            ></video>
        </div>
    </div>
</template>

<script>
    import mSection from '../components/mSection'
    import circleRate from '../components/CircleRate';
    import circleProgress from '../components/CircleProgress';
    import shanProgress from '../components/ShanProgress';
    import waterProgress from '../components/WaterProgress';
    import Warn from '../components/Warn'
    export default {
        components:{
            mSection,
            circleRate,
            circleProgress,
            shanProgress,
            waterProgress,
            Warn
        },

        data() {
            return {
                echartGate: null,
                echartParks:null,
                echartCars:null,
                echartTimer:null,
                echartRate:null,
                dayCar:{},
                overground:{},
                underground:{},
                parksTitle:['|','车辆状态','|','今日','|','昨日','|','同比','|']
            }
        },

        created () {
            
        },

        mounted () {
            this.echartGate = this.$echarts.init(this.$refs.gate);
            this.echartParks = this.$echarts.init(this.$refs.parks)
            this.echartCars = this.$echarts.init(this.$refs.allCars)
            this.echartTimer = this.$echarts.init(this.$refs.parkTimer)
            this.echartRate = this.$echarts.init(this.$refs.parkRate)

            this.daySpark()
            this.parkSpace()
            setTimeout(this.init,1000)
        },

        computed: {
            userRate() {
                let result = ((Number(this.overground.usedLot) + Number(this.underground.usedLot))/(Number(this.overground.totalLot) + Number(this.underground.totalLot))) *10000/100
                return result
            }
        },

        methods: {
            init() {
                let optionGate = {
                    xAxis:{type:'category',
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    yAxis:{
                        splitLine:{
                            show:true,
                            lineStyle:{
                                color: ['#FFFFFF2f'],
                                width: 1,
                                type: 'solid'
                            }
                        },
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    grid:{
                        x:30,
                        y:10,
                    },
                    dataset:{
                        source:[
                            ['0',11,77],
                            ['2',12,47],
                            ['4',31,57],
                            ['6',51,97],
                            ['8',81,127],
                            ['10',21,37],
                            ['12',61,47],
                            ['14',11,77],
                            ['16',21,17],
                            ['18',91,97],
                            ['20',11,27],
                            ['22',21,77],
                        ]
                    },
                    series:[
                        {
                            type:'line',
                            smooth: true,
                            name:'出闸机',
                            areaStyle: {
                                color: {
                                    type: 'linear',
                                    x0: 0,
                                    y0: 0,
                                    x2: 0,
                                    y2: 1,
                                    // color:'#F6BD1633',
                                    colorStops: [{
                                        offset: 0,
                                        color: '#3E77F4FF',
                                    }, {
                                        offset: 1,
                                        color: '#4073E800',
                                    }],
                                    globalCoord: false
                                },
                            },  
                            lineStyle:{
                                normal:{
                                    color:'#2673E1FF',
                                    width: 1,
                                    opacity: 0.9,
                                    curveness: 0.2 ,
                                }
                            },   
                            symbol: 'none',                            
                            encode:{
                                x:0,
                                y:1
                            }
                        },
                        {
                            type:'line',
                            smooth: true,
                            name:'进闸机',
                            symbol: 'none',
                            lineStyle: {
                                normal: {
                                    width: 1,
                                    opacity: 0.9,
                                    curveness: 0.2 ,
                                    color:'#0DB1D6FF'
                                }
                            },
                            areaStyle: {
                                color: {
                                    type: 'linear',
                                    x0: 0,
                                    y0: 0,
                                    x2: 0,
                                    y2: 1,
                                    // color:'#F6BD1633',
                                    colorStops: [{
                                        offset: 0,
                                        color: '#1FBDDEFF',
                                    }, {
                                        offset: 1,
                                        color: '#33CDE900',
                                    }],
                                    globalCoord: false
                                },                                
                            },
                            encode:{
                                x:0,
                                y:2
                            }
                        }
                    ]   
                }

                let optionLookCar = {
                    xAxis:{type:'category',
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    yAxis:{
                        splitLine:{
                            show:true,
                            lineStyle:{
                                color: ['#FFFFFF2f'],
                                width: 1,
                                type: 'solid'
                            }
                        },
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    grid:{
                        x:30,
                        y:10,
                    },
                    dataset:{
                        source:[
                            ['0',11,77],
                            ['2',12,47],
                            ['4',31,57],
                            ['6',51,97],
                            ['8',81,127],
                            ['10',21,37],
                            ['12',61,47],
                            ['14',11,77],
                            ['16',21,17],
                            ['18',91,97],
                            ['20',11,27],
                            ['22',21,77],
                        ]
                    },
                    series:[
                        {
                            type:'line',
                            smooth: true,
                            name:'标记车位',
                            areaStyle: {
                                color: {
                                    type: 'linear',
                                    x0: 0,
                                    y0: 0,
                                    x2: 0,
                                    y2: 1,
                                    // color:'#F6BD1633',
                                    colorStops: [{
                                        offset: 0,
                                        color: '#F6BD1633',
                                    }, {
                                        offset: 1,
                                        color: '#F6BD1633',
                                    }],
                                    globalCoord: false
                                },
                            },  
                            lineStyle:{
                                normal:{
                                    color:'#F6BD16',
                                    width: 1,
                                    opacity: 0.9,
                                    curveness: 0.2 ,
                                }
                            },   
                            symbol: 'none',                            
                            encode:{
                                x:0,
                                y:1
                            }
                        },
                        {
                            type:'line',
                            smooth: true,
                            name:'寻车',
                            symbol: 'none',
                            lineStyle: {
                                normal: {
                                    width: 1,
                                    opacity: 0.9,
                                    curveness: 0.2 ,
                                    color:'#FA6400FF'
                                }
                            },
                            areaStyle: {
                                color: {
                                    type: 'linear',
                                    x0: 0,
                                    y0: 0,
                                    x2: 0,
                                    y2: 1,
                                    // color:'#F6BD1633',
                                    colorStops: [{
                                        offset: 0,
                                        color: '#F6BD1633',
                                    }, {
                                        offset: 1,
                                        color: '#F6BD1633',
                                    }],
                                    globalCoord: false
                                },                                
                            },
                            encode:{
                                x:0,
                                y:2
                            }
                        }
                    ]   
                }

                let timerPie = {
                    legend: {
                        orient: 'vertical',//图例的显示方式  默认横向显示
                        right:40,
                        top:35,
                        textStyle: {//图例中文字的样式
                            color: '#fff',
                            fontSize: 14
                        },
                    },
                    series: [
                        {
                            name: '访问来源',
                            type: 'pie',
                            radius: ['90%'],
                            center: ['26%', '50%'],//整个饼图在整个父元素中的位置
                            // avoidLabelOverlap: false,
                            label: {
                                show: false,
                                position: 'right'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '10',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: false
                            },
                            data: [
                                {value: 1048, name: '访问量'},
                                {value: 735, name: '导航'},
                                {value: 580, name: '注册'},
                                {value: 484, name: '使用'},
                            ]
                        }
                    ],
                    color:['#058FE0FF', '#2DEAF8FF','#F4D98CFF','#DE7F7CFF']
                };

                let optionRate = {
                    xAxis:{type:'category',
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    yAxis:{
                        splitLine:{
                            show:true,
                            lineStyle:{
                                color: ['#FFFFFF2f'],
                                width: 1,
                                type: 'solid'
                            }
                        },
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    grid:{
                        x:30,
                        y:10,
                    },
                    dataset:{
                        source:[
                            ['0',11,77],
                            ['2',12,47],
                            ['4',31,57],
                            ['6',51,97],
                            ['8',81,127],
                            ['10',21,37],
                            ['12',61,47],
                            ['14',11,77],
                            ['16',21,17],
                            ['18',91,97],
                            ['20',11,27],
                            ['22',21,77],
                        ]
                    },
                    series:[
                        {
                            type:'line',
                            smooth: true,
                            name:'出闸机',
                            areaStyle: {
                                color: {
                                    type: 'linear',
                                    x0: 0,
                                    y0: 0,
                                    x2: 0,
                                    y2: 1,
                                    // color:'#F6BD1633',
                                    colorStops: [{
                                        offset: 0,
                                        color: '#3E77F4FF',
                                    }, {
                                        offset: 1,
                                        color: '#4073E800',
                                    }],
                                    globalCoord: false
                                },
                            },  
                            lineStyle:{
                                normal:{
                                    color:'#2673E1FF',
                                    width: 1,
                                    opacity: 0.9,
                                    curveness: 0.2 ,
                                }
                            },   
                            symbol: 'none',                            
                            encode:{
                                x:0,
                                y:1
                            }
                        },
                        {
                            type:'line',
                            smooth: true,
                            name:'进闸机',
                            symbol: 'none',
                            lineStyle: {
                                normal: {
                                    width: 1,
                                    opacity: 0.9,
                                    curveness: 0.2 ,
                                    color:'#0DB1D6FF'
                                }
                            },
                            areaStyle: {
                                color: {
                                    type: 'linear',
                                    x0: 0,
                                    y0: 0,
                                    x2: 0,
                                    y2: 1,
                                    // color:'#F6BD1633',
                                    colorStops: [{
                                        offset: 0,
                                        color: '#1FBDDEFF',
                                    }, {
                                        offset: 1,
                                        color: '#33CDE900',
                                    }],
                                    globalCoord: false
                                },                                
                            },
                            encode:{
                                x:0,
                                y:2
                            }
                        }
                    ]   
                }                

                this.echartGate.setOption(optionGate)
                this.echartCars.setOption(optionLookCar)
                this.echartTimer.setOption(timerPie)
                this.echartRate.setOption(optionRate)
            },

            async daySpark(){
                try {
                    let res = await this.$request.post('databoard/carDayData')
                    this.dayCar = res && res.result
                    let optionCars = {        
                        legend: {
                            orient: 'vertical',//图例的显示方式  默认横向显示
                            right:40,
                            top:35,
                            textStyle: {//图例中文字的样式
                                color: '#fff',
                                fontSize: 14
                            },
                        },
                        series: [
                            {
                                name: '访问来源',
                                type: 'pie',
                                radius: ['30%','90%'],
                                center: ['26%', '50%'],//整个饼图在整个父元素中的位置
                                // avoidLabelOverlap: false,
                                label: {
                                    show: true,
                                    position: 'inner',
                                    formatter: "{c}"
                                },
                                emphasis: {
                                    label: {
                                        show: true,
                                        fontSize: '10',
                                        fontWeight: 'bold'
                                    }
                                },
                                labelLine: {
                                    show: false
                                },
                                data: [
                                    {value: 1048, name: '入场'},
                                    {value: 735, name: '离场'},
                                    {value: 580, name: '在场'}
                                ]
                            }
                        ],
                        color:['#058FE0FF', '#2DEAF8FF','#F4D98CFF','#DE7F7CFF']
                    };
                    optionCars.series[0].data[0].value = this.dayCar.todayDataInNum
                    optionCars.series[0].data[1].value = this.dayCar.todayDataOutNum
                    optionCars.series[0].data[2].value = this.dayCar.todayDataOnNum
                    this.echartParks.setOption(optionCars)
                }catch (error) {
                    console.log('daySpark',error);   
                }
            },

            async parkSpace(){
                try {
                    let res = await this.$request.post('databoard/undergroundParking')
                    this.underground = res && res.result && res.result.underground
                    this.overground = res && res.result && res.result.overground

                }catch (error) {
                    console.log('parkSpace',error);   
                }
            }

        },

        beforeDestroy () {
            if(this.echartGate){
                this.echartGate.clear()
                this.$echarts.dispose(this.echartGate)
                this.echartGate = null                      
            }
            if(this.echartParks){
                this.echartParks.clear()
                this.$echarts.dispose(this.echartParks)
                this.echartParks = null                      
            }
            if(this.echartCars){
                this.echartCars.clear()
                this.$echarts.dispose(this.echartCars)
                this.echartCars = null                      
            }    
            if(this.echartTimer){
                this.echartTimer.clear()
                this.$echarts.dispose(this.echartTimer)
                this.echartTimer = null                      
            }  
            if(this.echartRate){
                this.echartRate.clear()
                this.$echarts.dispose(this.echartRate)
                this.echartRate = null                      
            }                                         
        },
    }
</script>

<style lang="less" scoped>
    @mainColor:#52FEF5;
    .line{
        background-color: #52FEF566;
        height: 1px;
        margin-top: 15px;
        margin-bottom: 15px;
    }

    .parking{
        position: relative;
        padding: 20px 0 0 20px;
        height: 100%;
        &-left{
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            height: 100%;
            &-top{
                display: flex;
                justify-content: space-between;
                &-single{
                    display: flex;
                    justify-content: space-around;
                    width: 100%;
                    &-car{
                        display: flex;
                        width: 88px;
                        flex-direction: column;
                        align-items: center;
                        div:nth-child(1){
                            margin-bottom: 22px;
                            margin-top: 10px;
                            color: #ffffff;
                            font-size: 14px;
                        }
                    }
                }

                &-special{
                    color: white;
                    display: grid;
                    padding-top: 15px;
                    width: 110px;
                    font-size: 10px;
                    grid-column-gap: 16px;
                    grid-template-columns: 32px auto;
                    grid-template-rows: repeat(4, 20px);
                    justify-items: start;
                    align-items: center;     
                    img:nth-child(1){
                        grid-row-start: 1;
                        grid-row-end: 3;
                        background-color: #D8D8D8;
                        width:32px;
                        border-radius: 50%;
                        height:32px;
                    }
                    img:nth-child(4){
                        grid-row-start: 3;
                        grid-row-end: 5;
                        background-color: #D8D8D8;
                        width:32px;
                        border-radius: 50%;
                        margin-top: 5px;
                        height:32px;
                    } 
                }
            }
            &-middle{
                display: flex;
                justify-content: space-around;
            }
            &-bottom{
                margin-top: 20px;
                display: flex;
                justify-content: space-around; 
            }

            &-gate{
                position: relative;

                &-chart{
                    position: absolute;
                    top:60px;
                    left:80px;
                    width: 330px;
                    height: 220px;
                }
            }

            &-parks{
                height:100px;
                width: 400px;
            }

            &-title{
                display: flex;
                color:#51FDF4;
                font-size: 14px;
                flex-wrap: nowrap;
                div:nth-child(odd){
                    flex-basis: 2px;
                    text-align: center;
                }
                div:nth-child(even){
                    flex: 1;
                    text-align: center;
                }
            }

            &-today{
                display: flex;
                color: white;
                align-items: center;
                margin-top: 10px;

                &-space{
                    flex: 1;
                }

                img:nth-child(2){
                    height: 26px;
                    flex-basis: 26px;
                }
                &-content{
                    text-align: center;
                    flex: 3;
                }
                &-rate{
                    flex:5;
                    display:flex;
                    align-items: center;
                    justify-content: flex-end;
                    div:nth-child(1){
                        margin-right: 2px;
                        height: 5px;
                        flex: 1;
                        background-color: #0091FF;
                    }
                    div:nth-child(2){
                        margin-left: 2px;
                        height: 5px;
                        flex: 1;
                        background-color: #0091FF;
                    }
                }
                &-trend{
                    width: 16px;
                    height:16px;
                }
            }
        }

        &-right{
            position: absolute;
            right:0;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            top:19px;
            width:468px;
            height: 100%;
            &-con{
                position: relative;
                &-ptop{
                    padding-top: 20px;
                    width: 66px;
                    height: 66px;
                    img{
                        width: 66px;
                        height:30px
                    }
                    div:nth-child(2){
                        color:#32C5FFFF;
                        font-size: 18px;
                        margin-top: -7px;
                        text-align: center;
                    }
                    div:nth-child(3){
                        color:#FFFFFFFF;
                        width: 132px;
                        transform-origin: 0;
                        font-size: 18px;
                        transform: scale(0.5);
                        text-align: center;
                        height: 10px;
                    }
                }

                &-pbottom{
                    width: 66px;
                    height: 66px;
                    margin-top: 20px;
                    margin-bottom: 15px;
                    img{
                        width: 66px;
                        height:30px
                    }
                    div:nth-child(2){
                        color:#50E3C2FF;
                        font-size: 18px;
                        margin-top: -7px;
                        text-align: center;
                    }
                    div:nth-child(3){
                        color:#FFFFFFFF;
                        width: 132px;
                        transform-origin: 0;
                        font-size: 18px;
                        transform: scale(0.5);
                        text-align: center;
                        height: 10px;
                    }               
                }

                &-cars{
                    position: absolute;
                    top:50px;
                    left:80px;
                    width: 300px;
                    height:230px
                }
            }

            &-time{
                width:300px;
                height: 150px;
            }

            &-secondTitle{
                color:#52FEF5;
                margin-top: 12px;
                font-size: 12px;
            }

            &-rate{
                height:180px;
                width: 400px;
                margin-bottom: -30px;
            }


        }

        &-video{
            width:370px;
            height:570px;
            border-radius: 20px;
            position: fixed;
            display: flex;
            flex-direction: column;
            align-items: center;
            left: 500px;
            top:60px;
            background-image: url(../assets/section-middle.png);
            //background-color: #000;
            background-size:100% 100%;
            &-title{
                color:@mainColor;
                font-size: 18px;
                text-align: center;
                padding: 10px 0;

            }
        }

    }


</style><template>
    <div class='container'>
        <div class="left">
            <div class="monitor">
                <div class="monitor-header">
                    <div class="monitor-header-tabs">
                        <div v-for="(value,item,index) in monitors" 
                            :key="index" :class="index==currentMonitor ? 'monitor-header-tabs-active' : 'monitor-header-tabs-unactive'"
                            @click="currentMonitor = index"    
                        >{{monitorObj[item]}}:{{value}}</div>
                    </div>
                </div>
                <div class="monitor-body">
                    <div class='monitor-body-data'>
                        <div class="monitor-body-data-left">
                            <img src="../assets/camera.png" alt="">
                            <div>监控{{monitors['total']}}<span>个</span></div>
                        </div>
                        <div class="monitor-body-data-show">
                            <div>设备在线率：{{onlineRate}}%</div>
                            <div class='monitor-body-data-show-progress'>
                                <el-progress :text-inside="true" :stroke-width="15" :percentage="onlineRate" color='#52FEF5FF'></el-progress>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <m-section title='门禁出入统计' class='guard' :padRight='10'>
                <div class="guard-data">
                    <div>累积通行</div>
                    <div>累积通行</div>
                    <div>累积通行</div>
                    <div></div>
                    <div>单日通行人数 2000</div>
                    <div>人数</div>
                    <div>员工数</div>
                    <div>访客数</div>
                    <div></div>
                    <div>单日员工数 1000</div>
                    <div>51450</div>
                    <div>21000</div>
                    <div>30450</div>
                    <div></div>
                    <div>单日访客数 1000</div>
                </div>
                <div class='guard-secondTitle'>单日进出人次统计</div>
                <div class="guard-person" ref='personChart'>

                </div>
                <div class='guard-thirdTitle'>单日进出人员信息</div>
                <el-table
                :data="tableData"
                width='410'
                :cell-style="{padding:'0px',margin:'0px'}"
                :row-style="tableRowStyle"
                :header-row-style="tableHeaderRowStyle"
                style="font-size:10px">
                    <el-table-column
                        prop="date"
                        label="编号"
                        width="60">
                    </el-table-column>
                    <el-table-column
                        prop="name"
                        label="姓名"
                        width="60">
                    </el-table-column>
                    <el-table-column
                        prop="identity"
                        label="身份"
                        width='60'
                        >
                    </el-table-column>
                    <el-table-column
                        prop="gate"
                        width='70'
                        label="进出闸机">
                    </el-table-column>
                    <el-table-column
                        prop="company"
                        width='70'
                        label="所属公司">
                    </el-table-column>
                    <el-table-column
                        prop="address"
                        label="园区地址">
                    </el-table-column>                                                
                </el-table>
                <div class='guard-secondTitle'>本周来访人员统计</div>
                <div class="guard-visitor" ref='guardVisitor'></div>
            </m-section>
        </div>
        <div class="right">
            <m-section title='视频监控' class='videos'>
                <div class="videos-search">
                    <img  src='../assets/search.png'/>
                    <input type="text" placeholder="请输入搜索内容">
                </div>
                <div class="videos-player">
                    <small-video v-for="(item,index) in monits" :key="index" :src="item"></small-video>
                    <!-- <div class="videos-player-wrap" id='videos-player-wrap'>
                        <video-player class="vjs-custom-skin" :options="playerOptions" :playsinline="true"></video-player>
                    </div> -->
                </div>
            </m-section>
            <Warn :num='60' class='warn'>
            </Warn>
        </div>

    </div>
</template>

<script>
import MSection from '../components/mSection.vue';
import Warn from '../components/Warn'
import SmallVideo from '@/components/SmallVideo'

    export default {
        components: {
            MSection,
            Warn,
            SmallVideo
        },
        data() {
            return {
                monitors:{
                    onLine: "1",
                    outLine: "0",
                    total: "1",
                },
                monitorObj:{
                    onLine:'在线',
                    outLine:'离线',
                    total:'全部'
                },
                currentMonitor:0,
                percent:0.1,
                chartPerson:null,
                chartVisitor:null,
                monits:[
                    'http://122.225.16.218:7086/live/cameraid/1000005$1/substream/2.m3u8',
                    'http://122.225.16.218:7086/live/cameraid/1000005$2/substream/2.m3u8',
                    'http://122.225.16.218:7086/live/cameraid/1000005$3/substream/2.m3u8',
                    'http://122.225.16.218:7086/live/cameraid/1000006$5/substream/2.m3u8',
                    'http://122.225.16.218:7086/live/cameraid/1000006$1/substream/2.m3u8',
                    'http://122.225.16.218:7086/live/cameraid/1000006$5/substream/2.m3u8'
                ]

            }
        },

        async created () {
            try {
                let res = await this.$request.post('databoard/camera')
                this.monitors = res.result
            } catch (error) {
                console.log('created',error);
            }
                            
        },


        mounted () {
            this.chartPerson = this.$echarts.init(this.$refs.personChart);
            this.chartVisitor = this.$echarts.init(this.$refs.guardVisitor);
            setTimeout(this.init,1500)
        },

        destroyed () {
            if(this.chartPerson){
                this.chartPerson.clear()
                this.$echarts.dispose(this.chartPerson)
                this.chartPerson = null  
            }
            if(this.chartVisitor){
                this.chartVisitor.clear()
                this.$echarts.dispose(this.chartVisitor)
                this.chartVisitor = null                  
            };
        },

        computed: {
            onlineRate(){
                let radio = 0
                try {
                    radio = Math.ceil(this.monitors['onLine']/this.monitors['total'] * 100) 
                } catch (error) {
                    console.log('onlineRate',error);
                }
                
                return radio
            }
        },

        methods: {
            init() {
                let guardPerson = {
                    xAxis:[
                        {
                            type:'category',
                            axisLabel:{
                                textStyle:{
                                    color:'#fff',
                                    fontSize:10
                                }
                            }
                        },
                    ],
                    color:['#FA6400','#F7B604'],
                    legend: {
                        right:20,
                        textStyle:{
                            color:'#ffff',
                            fontSize:10
                        }
                    },
                    yAxis:{
                        splitLine:{
                            show:true,
                            lineStyle:{
                                color: ['#FFFFFF2f'],
                                width: 1,
                                type: 'dashed'
                            }
                        },
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    grid:{
                        x:30,
                        y:20,
                    },
                    dataset:{
                        source:[
                            ['1月',22,18],
                            ['2月',20,19],
                            ['3月',18,20],
                            ['4月',20,21],
                            ['5月',24,14],
                            ['6月',25,16],
                            ['7月',23,19],
                            ['8月',21,18],
                            ['9月',22,20],
                            ['10月',19,19],
                        ]
                    },
                    series:[
                        {
                            type:'line',
                            smooth: true,
                            name:'员工',
                            // areaStyle: {
                            //     normal: {
                            //         color: '#2DA7DE80',
                            //         origin: "start"
                            //     }
                            // },
                            symbol: 'none',         
                            lineStyle:{
                                normal:{
                                    color:'#FA6400FF',
                                    width: 1.5,
                                    opacity: 0.9,
                                    curveness: 0.2 ,
                                }
                            },                   
                            encode:{
                                x:0,
                                y:1
                            }
                        },
                        {
                            type:'line',
                            smooth: true,
                            name:'访客',
                            symbol: 'none',
                            lineStyle: {
                                normal: {
                                    width: 1.5,
                                    opacity: 0.9,
                                    curveness: 0.2 ,
                                    color:'#F7B604FF'
                                }
                            },
                            // areaStyle: {
                            //     normal: {
                            //         color: '#43BDA980',
                            //         origin: "start"
                            //     }
                            // },
                            encode:{
                                x:0,
                                y:2
                            }
                        }
                    ]   
                }

                let weekVisitors = {
                    xAxis:{
                        type:'category',
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    
                    },
                    legend: {
                        right:20,
                        textStyle:{
                            color:'#ffff',
                            fontSize:10
                        }
                    },
                    yAxis:{
                        splitLine:{
                            show:true,
                            lineStyle:{
                                color: ['#FFFFFF2f'],
                                width: 1,
                                type: 'solid'
                            }
                        },
                        axisLabel:{
                            textStyle:{
                                color:'#fff',
                                fontSize:10
                            }
                        }
                    },
                    grid:{
                        x:30,
                        y:10,
                    },
                    dataset:{
                        source:[
                            ['1#',11,77],
                            ['2#',12,47],
                            ['3#',31,57],
                            ['4#',51,97],
                            ['5#',81,127],
                            ['6#',21,37],
                            ['7#',61,47],
                            ['8#',11,77],
                            ['9#',21,17]
                        ]
                    },
                    series:[
                        {
                            type:'bar',
                            name:'用电量',
                            color:'#fff',
                            smooth: true,                        
                            encode:{
                                x:0,
                                y:1
                            },
                            itemStyle:{//
                                normal:{
                                    color:['#5BC8FE']
                                },
                                emphasis:{

                                }
                            }
                        },
                        {
                            name:'用水量',
                            type:'bar',
                            encode:{
                                x:0,
                                y:2
                            },
                            itemStyle:{//
                                normal:{
                                    color:['#9FFFFA']
                                }
                            }                            
                        }
                    ]   
                }

                this.chartPerson.setOption(guardPerson)
                this.chartVisitor.setOption(weekVisitors)
            },
            tableRowStyle(){
                return {'height':'30px','background':'#294C82',color:'#fff'}
            },
            tableHeaderRowStyle(){
                return {'height':'30px','background':'#294C820f',color:'#fff'}
            },

        },

    }
</script>

<style lang="less" scoped>

    /deep/ .el-table th, .el-table tr{
        background-color: #294C82ff;
    }


    @mainColor:#52FEF5;
    .container{
        .left{
            height:100%;
            width: 500px;
            position: relative;
            display: flex;
            flex-direction: column;
            align-content:space-between;
            justify-content: space-between; 
            padding-left: 48px;  
            .monitor{
                width:420px;
                height: 174px;
                font-size: 14px;
                color:white;
                overflow: hidden;
                margin-top: 19px;
                &-header{
                    background: url(../assets/section-top.png);
                    background-size: 100% 100%;
                    height:37px;
                    padding-top: 11px;
                    &-tabs{
                        display: flex;
                        font-size: 15px;
                        height: 26px;
                        margin-top: 5px;
                        &-unactive{
                            margin-left: 10px;
                            color:white;
                            height: 26px;
                            line-height: 26px;
                        }
                        &-active{
                            color:@mainColor;
                            border-bottom: @mainColor solid 2px;
                            margin-left: 10px;
                            height: 26px;
                            line-height: 26px;
                        }
                    }
                }
                &-body{
                    background: url(../assets/section-middle.png);
                    background-size: 100% 100%;
                    padding-bottom: 12px;
                    &-data{
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        width: 400px;
                        padding-top: 20px;
                        &-left{
                            img{
                                height:68px;
                                width: 68px;
                            }
                        }
                        &-show{
                            width:200px;
                            margin-left: 40px;
                            &-progress{
                                margin-top: 12px;
                            }
                        }
                    }
                }

            }
            .guard{
                .body{
                    padding-right: 10px;
                }
                margin-top: 15px;
                &-data{
                    display: grid;
                    padding-top: 20px;
                    grid-gap: 3px;
                    font-size: 12px;
                    grid-template-columns: 60px 60px 60px 10px 150px;
                    grid-template-rows: 18px 18px 25px;
                    justify-items: start ;
                    align-items: center;
                    color: white;

                    div:nth-child(4){
                        border-radius: 50%;
                        background-color:#52FEF5FF ;
                        width: 6px;
                        height: 6px;
                    }
                    div:nth-child(5){
                        color:#52FEF5FF;
                    }
                    div:nth-child(9){
                        border-radius: 50%;
                        background-color:#32C5FFFF ;
                        width: 6px;
                        height: 6px;
                    }
                    div:nth-child(10){
                        color:#32C5FFFF;
                    } 
                    div:nth-child(11){
                        color:#52FEF5FF;
                        font-size: 18px;
                    }
                    div:nth-child(12){
                        color:#32C5FFFF;
                        font-size: 18px;
                    }
                    div:nth-child(13){
                        color:#F7B604FF;
                        font-size: 18px;
                    }
                    div:nth-child(14){
                        border-radius: 50%;
                        background-color:#F7B604FF ;
                        width: 6px;
                        height: 6px;
                    }                                   
                    div:nth-child(15){
                        color:#F7B604FF;
                    }                               
                }
                &-secondTitle{
                    margin-top: 18px;
                    color: @mainColor;
                    font-size: 12px;      
                }
                &-thirdTitle{
                    margin-top: -20px;
                    margin-bottom: 10px;
                    color: @mainColor;
                    font-size: 12px;      
                }            
                &-person{
                    width: 400px;
                    height:150px;
                }
                &-visitor{
                    width: 400px;
                    height:150px;
                }
            }
        }

        .right{
            position: absolute;
            right:0;
            height: 100%;
            width: 468px;
            display: flex;
            flex-direction: column;
            align-content:space-between;
            justify-content: space-between; 
            top:0;  
            .videos{
                margin-top: 19px;
                &-search{
                    display: flex;
                    align-items: center;
                    height:50px;
                    position: relative;
                    padding-top: 5px;
                    img{
                        position: absolute;
                        left:36px;
                        width: 16px;
                        height:16px;
                    }
                    input{
                        left:25px;
                        position: absolute;
                        background-color: #294C826B;
                        border:0;
                        border-radius: 12px;
                        height:25px;
                        width: 230px;
                        padding-left: 40px;
                    }
                    input::placeholder{
                        color:#F0F0F0FF
                    }
                }
                &-player{
                    height:500px;
                    display: flex;
                    flex-wrap: wrap;
                    justify-content: space-between;
                    &-wrap{
                        width: 200px;
                        height: 150px;
                    }
                }
            }
            .warn{
                &-item{
                    color:white;
                    font-size: 14px;
                    margin-bottom: 12px;
                }
            }                       
        }


    }
</style>import Vue from 'vue'
import Home from '../pages/App'
import Test from '../pages/Test'
import VueRouter from 'vue-router'
import Hello from '../components/HelloWorld'
import LampNet from '@/pages/LampNet'
import Login from '@/pages/Login'
import EnergySave from '@/pages/EnergySave'
import SmartParking from '@/pages/SmartParking'
import SmartSafety from '@/pages/SmartSafety'

// 2. 定义路由
// 每个路由应该映射一个组件。 其中"component" 可以是
// 通过 Vue.extend() 创建的组件构造器，
// 或者，只是一个组件配置对象。
// 我们晚点再讨论嵌套路由。
const routes = [
  { path: '/', component: Home },
  { path: '/test', component: Test },
  {path:'/hello', component:Hello},
  {path:'/login',component:Login },
  {path:'/lamp',component:LampNet },
  {path:'/energy',component:EnergySave },
  {path:'/parking',component:SmartParking },
  {path:'/safety',component:SmartSafety },
]

const router = new VueRouter({
    routes // (缩写) 相当于 routes: routes
})

Vue.use(VueRouter)
export default routerimport Vue from 'vue'
import Vuex from 'vuex'

Vue.use(Vuex)

const store = new Vuex.Store({
  state: {
    loopIndex: 1
  },
  mutations: {
    incrementLoop(state) {
      state.loopIndex++
    }
  }
})

export default store<template>
  <div class="test-videojs">
    <video id="videoPlayer" class="video-js" muted></video>
  </div>
</template>
<script>
import Videojs from "video.js"; // 引入Videojs 
export default {
    data() {
        return {
        //  https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8 是一段视频，可将cctv1 （是live现场直播，不能快退）的替换为它，看到快进快退的效果
            nowPlayVideoUrl: "http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8"
        };
    },

    mounted() {
        this.initVideo(this.nowPlayVideoUrl);
    },

    methods: {
        initVideo(nowPlayVideoUrl) {
            // 这些options属性也可直接设置在video标签上，见 muted
            let options = {
                autoplay: true, // 设置自动播放
                controls: true, // 显示播放的控件
                sources: [
                    // 注意，如果是以option方式设置的src,是不能实现 换台的 (即使监听了nowPlayVideoUrl也没实现)
                    {
                    src: nowPlayVideoUrl,
                    type: "application/x-mpegURL" // 告诉videojs,这是一个hls流
                    }
                ]
            };
            // videojs的第一个参数表示的是，文档中video的id
            const myPlyer = Videojs("videoPlayer", options, function onPlayerReady() {
            console.log("onPlayerReady 中的this指的是：", this); // 这里的this是指Player,是由Videojs创建出来的实例
            console.log(myPlyer === this); // 这里返回的是true
            });
        }
    }
};
</script>
<style lang="less">
#videoPlayer {
  width: 300px;
  height: 230px;
  margin: 50px auto;
}
</style>